Import(['extEnv'])

platform = extEnv['PLATFORM']

# Pull down tinycrypt from github and build the library

tcEnv = extEnv.Clone()
tcgit = tcEnv.Command('./tinycrypt/.git', None, 'git clone https://github.com/01org/tinycrypt.git ext/tinycrypt')

tcEnv['CFLAGS'] = ''

if platform == 'win32':
    tcEnv.Append(CPPDEFINES = ['_CRT_SECURE_NO_WARNINGS'])
    tcEnv.Append(CFLAGS = ['/J', '/W3', '/nologo'])
    tcEnv.Append(CFLAGS = ['/Gy', '/O2', '/GF', '/MT'])
    # Suppress specific warnings
    tcEnv.Append(CFLAGS = ['/wd4244', '/wd4267'])

elif tcEnv['PLATFORM'] == 'posix':
    tcEnv.Append(CFLAGS = ['-Os', '-fPIC', '-std=c99', '-Wall', '-Wextra',  '-D_ISOC99_SOURCE', '-MMD'])
else:
    print 'Unsupported system'
    exit()

tcEnv['CPPPATH'] = './tinycrypt/lib/include'

tcsrcs = ['./tinycrypt/lib/source/aes_encrypt.c',
          './tinycrypt/lib/source/ccm_mode.c',
          './tinycrypt/lib/source/sha256.c',
          './tinycrypt/lib/source/utils.c']

tclib = tcEnv.Library('lib/libtinycrypt', tcsrcs)

Depends(tcsrcs, tcgit)

# Pull down safestringlib from github and build the library

scEnv = extEnv.Clone()
scgit = scEnv.Command('./safestring/.git', None, 'git clone https://github.com/01org/safestringlib.git ext/safestring')

if scEnv['PLATFORM'] == 'win32':
    scEnv.Append(CPPDEFINES = ['_CRT_SECURE_NO_WARNINGS'])
    scEnv.Append(CPPDEFINES = ['__STDC_WANT_SECURE_LIB__=0'])
    scEnv.Append(CFLAGS = ['/J', '/W3', '/nologo'])
    scEnv.Append(CFLAGS = ['/Gy', '/O2', '/GF', '/MT'])

    # Suppress specific warnings
    scEnv.Append(CFLAGS = ['/wd4267', '/wd4244'])
elif scEnv['PLATFORM'] == 'posix':
    scEnv.Append(CPPDEFINES = ['_ISCO99_SOURCE'])
    scEnv.Append(CFLAGS = ['-Os', '-fPIC', '-std=c99', '-Wall', '-Wextra', '-Wno-unused-parameter', '-MMD'])
else:
    print 'Unsupported system'
    exit()

scsrcs = ['./safestring/safeclib/ignore_handler_s.c',
          './safestring/safeclib/safe_mem_constraint.c',
          './safestring/safeclib/safe_str_constraint.c',
          './safestring/safeclib/memcpy_s.c',
          './safestring/safeclib/memmove_s.c',
          './safestring/safeclib/memset_s.c',
          './safestring/safeclib/memzero_s.c',
          './safestring/safeclib/strcmp_s.c',
          './safestring/safeclib/strncpy_s.c',
          './safestring/safeclib/strnlen_s.c',
          './safestring/safeclib/mem_primitives_lib.c']

scEnv['CPPPATH'] = './safestring/include'

sclib = scEnv.Library('lib/safestring', scsrcs)

Depends(scsrcs, scgit)

# Return libraries 

Return (['tclib', 'sclib'])
