<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="dps_8h" kind="file" language="C++">
    <compoundname>dps.h</compoundname>
    <includes local="no">stdint.h</includes>
    <includes local="no">stddef.h</includes>
    <includes local="no">sys/socket.h</includes>
    <includes refid="err_8h" local="no">dps/err.h</includes>
    <includes refid="uuid_8h" local="no">dps/uuid.h</includes>
    <includedby refid="discovery_8h" local="no">discovery.h</includedby>
    <includedby refid="dispatcher_8h" local="no">dispatcher.h</includedby>
    <includedby refid="event_8h" local="no">event.h</includedby>
    <includedby refid="registration_8h" local="no">registration.h</includedby>
    <includedby refid="synchronous_8h" local="no">synchronous.h</includedby>
    <incdepgraph>
      <node id="27">
        <label>stdint.h</label>
      </node>
      <node id="28">
        <label>stddef.h</label>
      </node>
      <node id="30">
        <label>dps/err.h</label>
        <link refid="err_8h"/>
      </node>
      <node id="26">
        <label>dps.h</label>
        <link refid="dps_8h"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>sys/socket.h</label>
      </node>
      <node id="31">
        <label>dps/uuid.h</label>
        <link refid="uuid_8h"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="34">
        <label>dispatcher.h</label>
        <link refid="dispatcher_8h"/>
      </node>
      <node id="37">
        <label>synchronous.h</label>
        <link refid="synchronous_8h"/>
      </node>
      <node id="33">
        <label>discovery.h</label>
        <link refid="discovery_8h_source"/>
      </node>
      <node id="36">
        <label>registration.h</label>
        <link refid="registration_8h"/>
      </node>
      <node id="32">
        <label>dps.h</label>
        <link refid="dps_8h"/>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>event.h</label>
        <link refid="event_8h"/>
      </node>
    </invincdepgraph>
    <innerclass refid="struct___d_p_s___buffer" prot="public">_DPS_Buffer</innerclass>
    <innerclass refid="struct___d_p_s___key" prot="public">_DPS_Key</innerclass>
    <innerclass refid="struct___d_p_s___key_cert" prot="public">_DPS_KeyCert</innerclass>
    <innerclass refid="struct___d_p_s___key_e_c" prot="public">_DPS_KeyEC</innerclass>
    <innerclass refid="struct___d_p_s___key_id" prot="public">_DPS_KeyId</innerclass>
    <innerclass refid="struct___d_p_s___key_symmetric" prot="public">_DPS_KeySymmetric</innerclass>
      <sectiondef kind="user-defined">
      <header>KeyStore</header>
      <description><para>Hooks for implementing an application-defined key store. </para></description>
      <memberdef kind="define" id="group__keystore_1ga02d2171bf3c24345e5f562cb3e181a57" prot="public" static="no">
        <name>DPS_AES_256_KEY_LEN</name>
        <initializer>32</initializer>
        <briefdescription>
<para>AES 256 key length, in bytes. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="136" column="9" bodyfile="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="enum" id="group__keystore_1ga7ca1045749c725e9c4a1b4758b2a0196" prot="public" static="no" strong="no">
        <type></type>
        <name>DPS_KeyType</name>
        <enumvalue id="group__keystore_1gga7ca1045749c725e9c4a1b4758b2a0196a662c1e84628d96be8ae08163af382392" prot="public">
          <name>DPS_KEY_SYMMETRIC</name>
          <briefdescription>
<para>DPS_KeySymmetric. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__keystore_1gga7ca1045749c725e9c4a1b4758b2a0196a58453a89367757e523ac337232387d89" prot="public">
          <name>DPS_KEY_EC</name>
          <briefdescription>
<para>DPS_KeyEC. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__keystore_1gga7ca1045749c725e9c4a1b4758b2a0196a04e294e477af49e6a4927884f45fcb99" prot="public">
          <name>DPS_KEY_EC_CERT</name>
          <briefdescription>
<para>DPS_KeyCert. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>A DPS key type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="120" column="1" bodyfile="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" bodystart="120" bodyend="124"/>
      </memberdef>
      <memberdef kind="enum" id="group__keystore_1ga9ba152af7a3ed9076bfa597ef918cac1" prot="public" static="no" strong="no">
        <type></type>
        <name>DPS_ECCurve</name>
        <enumvalue id="group__keystore_1gga9ba152af7a3ed9076bfa597ef918cac1a4b56a9b3ab7d0e23d57bad72f0c93239" prot="public">
          <name>DPS_EC_CURVE_RESERVED</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__keystore_1gga9ba152af7a3ed9076bfa597ef918cac1a359e576be45def67ea14b96c7bfbe100" prot="public">
          <name>DPS_EC_CURVE_P384</name>
          <initializer>= 2</initializer>
          <briefdescription>
<para>NIST P-384 also known as secp384r1. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__keystore_1gga9ba152af7a3ed9076bfa597ef918cac1abb97d4a693a02becf44c12b6e4678724" prot="public">
          <name>DPS_EC_CURVE_P521</name>
          <initializer>= 3</initializer>
          <briefdescription>
<para>NIST P-521 also known as secp521r1. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Allowed elliptic curves. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="141" column="1" bodyfile="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" bodystart="141" bodyend="145"/>
      </memberdef>
      <memberdef kind="typedef" id="group__keystore_1ga4c58e71301ab14e675033c601e4eabe1" prot="public" static="no">
        <type>struct <ref refid="struct___d_p_s___key_symmetric" kindref="compound">_DPS_KeySymmetric</ref></type>
        <definition>typedef struct _DPS_KeySymmetric  DPS_KeySymmetric</definition>
        <argsstring></argsstring>
        <name>DPS_KeySymmetric</name>
        <briefdescription>
<para>Symmetric key data. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Need to define this outside of DPS_Key to satisfy SWIG. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="134" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__keystore_1ga658140277e0cd5c6ccc3b7727ecaae8a" prot="public" static="no">
        <type>struct <ref refid="struct___d_p_s___key_e_c" kindref="compound">_DPS_KeyEC</ref></type>
        <definition>typedef struct _DPS_KeyEC  DPS_KeyEC</definition>
        <argsstring></argsstring>
        <name>DPS_KeyEC</name>
        <briefdescription>
<para>Elliptic curve key data. </para>        </briefdescription>
        <detaileddescription>
<para>Only <computeroutput>x</computeroutput> and <computeroutput>y</computeroutput> are needed for a public key. Similarly, only <computeroutput>d</computeroutput> is needed for a private key.</para><para><simplesect kind="note"><para>Need to define this outside of DPS_Key to satisfy SWIG. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="160" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__keystore_1ga98b6701b118cab76965736ad720f9bcf" prot="public" static="no">
        <type>struct <ref refid="struct___d_p_s___key_cert" kindref="compound">_DPS_KeyCert</ref></type>
        <definition>typedef struct _DPS_KeyCert  DPS_KeyCert</definition>
        <argsstring></argsstring>
        <name>DPS_KeyCert</name>
        <briefdescription>
<para>Certificate key data. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Need to define this outside of DPS_Key to satisfy SWIG. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="171" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__keystore_1gaa56a1429b6a1658e674eea558bdbbfc0" prot="public" static="no">
        <type>struct <ref refid="struct___d_p_s___key" kindref="compound">_DPS_Key</ref></type>
        <definition>typedef struct _DPS_Key  DPS_Key</definition>
        <argsstring></argsstring>
        <name>DPS_Key</name>
        <briefdescription>
<para>Union of supported key types. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="184" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__keystore_1ga4345e29dd2ad5d7fd88a1e988787bd72" prot="public" static="no">
        <type>struct <ref refid="struct___d_p_s___key_id" kindref="compound">_DPS_KeyId</ref></type>
        <definition>typedef struct _DPS_KeyId  DPS_KeyId</definition>
        <argsstring></argsstring>
        <name>DPS_KeyId</name>
        <briefdescription>
<para>An identifier of a key in a key store. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="192" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__keystore_1gaf3833cfe48f848f698514bc5daa075fa" prot="public" static="no">
        <type>struct _DPS_KeyStore</type>
        <definition>typedef struct _DPS_KeyStore DPS_KeyStore</definition>
        <argsstring></argsstring>
        <name>DPS_KeyStore</name>
        <briefdescription>
<para>Opaque type for a key store. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="100" column="1" bodyfile="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" bodystart="197" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__keystore_1ga7c3e50965b65334e9791780fa855ed16" prot="public" static="no">
        <type>struct _DPS_KeyStoreRequest</type>
        <definition>typedef struct _DPS_KeyStoreRequest DPS_KeyStoreRequest</definition>
        <argsstring></argsstring>
        <name>DPS_KeyStoreRequest</name>
        <briefdescription>
<para>Opaque type for a key store request. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="100" column="1" bodyfile="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" bodystart="202" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__keystore_1ga83d3ade4f4acd7d4385d606270ddfd29" prot="public" static="no">
        <type><ref refid="group__status_1ga30395a84d3cad9d4ec29848106415038" kindref="member">DPS_Status</ref>(*</type>
        <definition>typedef DPS_Status(* DPS_KeyAndIdHandler) (DPS_KeyStoreRequest *request)</definition>
        <argsstring>)(DPS_KeyStoreRequest *request)</argsstring>
        <name>DPS_KeyAndIdHandler</name>
        <briefdescription>
<para>Function prototype for a key store handler called when a key and key identifier is requested. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="group__keystore_1ga289b1c74c01c9988f04297aa082986de" kindref="member">DPS_SetKeyAndId()</ref> should be called to provide the key and identifier to the caller.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>request</parametername>
</parameternamelist>
<parameterdescription>
<para>The request, only valid with the body of this callback function.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><itemizedlist>
<listitem><para>DPS_OK when <ref refid="group__keystore_1ga289b1c74c01c9988f04297aa082986de" kindref="member">DPS_SetKeyAndId()</ref> succeeds</para></listitem><listitem><para>DPS_ERR_MISSING when no key is configured for this host</para></listitem><listitem><para>error otherwise </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="219" column="1" bodyfile="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" bodystart="219" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__keystore_1gaccf7e3d43bc1e586132d7f1ae03d02f7" prot="public" static="no">
        <type><ref refid="group__status_1ga30395a84d3cad9d4ec29848106415038" kindref="member">DPS_Status</ref>(*</type>
        <definition>typedef DPS_Status(* DPS_KeyHandler) (DPS_KeyStoreRequest *request, const DPS_KeyId *keyId)</definition>
        <argsstring>)(DPS_KeyStoreRequest *request, const DPS_KeyId *keyId)</argsstring>
        <name>DPS_KeyHandler</name>
        <briefdescription>
<para>Function prototype for a key store handler called when a key with the provided key identifier is requested. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="group__keystore_1ga15d6a9b8256b67c2ec8b1d365a98dbab" kindref="member">DPS_SetKey()</ref> should be called to provide the key to the caller.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>request</parametername>
</parameternamelist>
<parameterdescription>
<para>The request, only valid with the body of this callback function. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>keyId</parametername>
</parameternamelist>
<parameterdescription>
<para>The identifier of the key to provide.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><itemizedlist>
<listitem><para>DPS_OK when <ref refid="group__keystore_1ga15d6a9b8256b67c2ec8b1d365a98dbab" kindref="member">DPS_SetKey()</ref> succeeds</para></listitem><listitem><para>DPS_ERR_MISSING when no key is located</para></listitem><listitem><para>error otherwise </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="236" column="1" bodyfile="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" bodystart="236" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__keystore_1ga5b4cf102912eea802196d3e307c399ef" prot="public" static="no">
        <type><ref refid="group__status_1ga30395a84d3cad9d4ec29848106415038" kindref="member">DPS_Status</ref>(*</type>
        <definition>typedef DPS_Status(* DPS_EphemeralKeyHandler) (DPS_KeyStoreRequest *request, const DPS_Key *key)</definition>
        <argsstring>)(DPS_KeyStoreRequest *request, const DPS_Key *key)</argsstring>
        <name>DPS_EphemeralKeyHandler</name>
        <briefdescription>
<para>Function prototype for a key store handler called when an ephemeral key with the provided type is requested. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="group__keystore_1ga15d6a9b8256b67c2ec8b1d365a98dbab" kindref="member">DPS_SetKey()</ref> should be called to provide the ephemeral key to the caller.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>request</parametername>
</parameternamelist>
<parameterdescription>
<para>The request, only valid with the body of this callback function. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The requested key type and parameters (e.g. key-&gt;type is DPS_KEY_EC and key-&gt;ec.curve is DPS_EC_CURVE_P521).</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><itemizedlist>
<listitem><para>DPS_OK when <ref refid="group__keystore_1ga15d6a9b8256b67c2ec8b1d365a98dbab" kindref="member">DPS_SetKey()</ref> succeeds</para></listitem><listitem><para>DPS_ERR_MISSING when no key is located</para></listitem><listitem><para>error otherwise </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="254" column="1" bodyfile="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" bodystart="254" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__keystore_1ga0acd005f34bca4fcbe1c460e2305ddae" prot="public" static="no">
        <type><ref refid="group__status_1ga30395a84d3cad9d4ec29848106415038" kindref="member">DPS_Status</ref>(*</type>
        <definition>typedef DPS_Status(* DPS_CAHandler) (DPS_KeyStoreRequest *request)</definition>
        <argsstring>)(DPS_KeyStoreRequest *request)</argsstring>
        <name>DPS_CAHandler</name>
        <briefdescription>
<para>Function prototype for a key store handler called when the trusted CA chain is requested. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="group__keystore_1ga37595f3207e42c52f7006659399135b2" kindref="member">DPS_SetCA()</ref> should be called to provide the CA chain to the caller.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>request</parametername>
</parameternamelist>
<parameterdescription>
<para>The request, only valid with the body of this callback function.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><itemizedlist>
<listitem><para>DPS_OK when <ref refid="group__keystore_1ga37595f3207e42c52f7006659399135b2" kindref="member">DPS_SetCA()</ref> succeeds</para></listitem><listitem><para>DPS_ERR_MISSING when no CA chain is configured</para></listitem><listitem><para>error otherwise </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="270" column="1" bodyfile="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" bodystart="270" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="group__keystore_1ga289b1c74c01c9988f04297aa082986de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__status_1ga30395a84d3cad9d4ec29848106415038" kindref="member">DPS_Status</ref></type>
        <definition>DPS_Status DPS_SetKeyAndId</definition>
        <argsstring>(DPS_KeyStoreRequest *request, const DPS_Key *key, const DPS_KeyId *keyId)</argsstring>
        <name>DPS_SetKeyAndId</name>
        <param>
          <type><ref refid="group__keystore_1ga7c3e50965b65334e9791780fa855ed16" kindref="member">DPS_KeyStoreRequest</ref> *</type>
          <declname>request</declname>
        </param>
        <param>
          <type>const <ref refid="group__keystore_1gaa56a1429b6a1658e674eea558bdbbfc0" kindref="member">DPS_Key</ref> *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const <ref refid="group__keystore_1ga4345e29dd2ad5d7fd88a1e988787bd72" kindref="member">DPS_KeyId</ref> *</type>
          <declname>keyId</declname>
        </param>
        <briefdescription>
<para>Provide a key and key identifier to a key store request. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>request</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput>request</computeroutput> parameter of the handler </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The key </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>keyId</parametername>
</parameternamelist>
<parameterdescription>
<para>The identifier of the key to provide</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DPS_OK or an error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="281" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__keystore_1ga15d6a9b8256b67c2ec8b1d365a98dbab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__status_1ga30395a84d3cad9d4ec29848106415038" kindref="member">DPS_Status</ref></type>
        <definition>DPS_Status DPS_SetKey</definition>
        <argsstring>(DPS_KeyStoreRequest *request, const DPS_Key *key)</argsstring>
        <name>DPS_SetKey</name>
        <param>
          <type><ref refid="group__keystore_1ga7c3e50965b65334e9791780fa855ed16" kindref="member">DPS_KeyStoreRequest</ref> *</type>
          <declname>request</declname>
        </param>
        <param>
          <type>const <ref refid="group__keystore_1gaa56a1429b6a1658e674eea558bdbbfc0" kindref="member">DPS_Key</ref> *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Provide a key to a key store request. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>request</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput>request</computeroutput> parameter of the handler </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The key</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DPS_OK or an error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="291" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__keystore_1ga37595f3207e42c52f7006659399135b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__status_1ga30395a84d3cad9d4ec29848106415038" kindref="member">DPS_Status</ref></type>
        <definition>DPS_Status DPS_SetCA</definition>
        <argsstring>(DPS_KeyStoreRequest *request, const char *ca)</argsstring>
        <name>DPS_SetCA</name>
        <param>
          <type><ref refid="group__keystore_1ga7c3e50965b65334e9791780fa855ed16" kindref="member">DPS_KeyStoreRequest</ref> *</type>
          <declname>request</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>ca</declname>
        </param>
        <briefdescription>
<para>Provide a trusted CA chain to a key store request. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>request</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput>request</computeroutput> parameter of the handler </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ca</parametername>
</parameternamelist>
<parameterdescription>
<para>The CA chain in PEM format</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DPS_OK or an error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="301" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__keystore_1ga088b3dc5eff10ab334d1e2aa0a329c26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__keystore_1gaf3833cfe48f848f698514bc5daa075fa" kindref="member">DPS_KeyStore</ref> *</type>
        <definition>DPS_KeyStore* DPS_KeyStoreHandle</definition>
        <argsstring>(DPS_KeyStoreRequest *request)</argsstring>
        <name>DPS_KeyStoreHandle</name>
        <param>
          <type><ref refid="group__keystore_1ga7c3e50965b65334e9791780fa855ed16" kindref="member">DPS_KeyStoreRequest</ref> *</type>
          <declname>request</declname>
        </param>
        <briefdescription>
<para>Returns the <computeroutput>DPS_KeyStore*</computeroutput> of a key store request. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>request</parametername>
</parameternamelist>
<parameterdescription>
<para>A key store request</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The DPS_KeyStore* or NULL </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="310" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__keystore_1gafa79de23848ff56d0cced67897313369" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__keystore_1gaf3833cfe48f848f698514bc5daa075fa" kindref="member">DPS_KeyStore</ref> *</type>
        <definition>DPS_KeyStore* DPS_CreateKeyStore</definition>
        <argsstring>(DPS_KeyAndIdHandler keyAndIdHandler, DPS_KeyHandler keyHandler, DPS_EphemeralKeyHandler ephemeralKeyHandler, DPS_CAHandler caHandler)</argsstring>
        <name>DPS_CreateKeyStore</name>
        <param>
          <type><ref refid="group__keystore_1ga83d3ade4f4acd7d4385d606270ddfd29" kindref="member">DPS_KeyAndIdHandler</ref></type>
          <declname>keyAndIdHandler</declname>
        </param>
        <param>
          <type><ref refid="group__keystore_1gaccf7e3d43bc1e586132d7f1ae03d02f7" kindref="member">DPS_KeyHandler</ref></type>
          <declname>keyHandler</declname>
        </param>
        <param>
          <type><ref refid="group__keystore_1ga5b4cf102912eea802196d3e307c399ef" kindref="member">DPS_EphemeralKeyHandler</ref></type>
          <declname>ephemeralKeyHandler</declname>
        </param>
        <param>
          <type><ref refid="group__keystore_1ga0acd005f34bca4fcbe1c460e2305ddae" kindref="member">DPS_CAHandler</ref></type>
          <declname>caHandler</declname>
        </param>
        <briefdescription>
<para>Creates a key store. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>keyAndIdHandler</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional handler for receiving key and key identifier requests </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>keyHandler</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional handler for receiving key requests </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ephemeralKeyHandler</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional handler for receiving ephemeral key requests </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>caHandler</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional handler for receiving CA chain requests</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The key store or NULL if there were no resources. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="324" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__keystore_1ga40bea030ef0ba65ec332880ae2bbfee1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DPS_DestroyKeyStore</definition>
        <argsstring>(DPS_KeyStore *keyStore)</argsstring>
        <name>DPS_DestroyKeyStore</name>
        <param>
          <type><ref refid="group__keystore_1gaf3833cfe48f848f698514bc5daa075fa" kindref="member">DPS_KeyStore</ref> *</type>
          <declname>keyStore</declname>
        </param>
        <briefdescription>
<para>Destroys a previously created key store. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>keyStore</parametername>
</parameternamelist>
<parameterdescription>
<para>The key store </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="332" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__keystore_1gaf8062875af6cab5caabc3f13bf995807" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__status_1ga30395a84d3cad9d4ec29848106415038" kindref="member">DPS_Status</ref></type>
        <definition>DPS_Status DPS_SetKeyStoreData</definition>
        <argsstring>(DPS_KeyStore *keyStore, void *data)</argsstring>
        <name>DPS_SetKeyStoreData</name>
        <param>
          <type><ref refid="group__keystore_1gaf3833cfe48f848f698514bc5daa075fa" kindref="member">DPS_KeyStore</ref> *</type>
          <declname>keyStore</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Store a pointer to application data in a key store. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>keyStore</parametername>
</parameternamelist>
<parameterdescription>
<para>The key store </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The data pointer to store</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DPS_OK or an error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="342" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__keystore_1ga3b67d7dde74267ee9342dc3efd33812b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* DPS_GetKeyStoreData</definition>
        <argsstring>(const DPS_KeyStore *keyStore)</argsstring>
        <name>DPS_GetKeyStoreData</name>
        <param>
          <type>const <ref refid="group__keystore_1gaf3833cfe48f848f698514bc5daa075fa" kindref="member">DPS_KeyStore</ref> *</type>
          <declname>keyStore</declname>
        </param>
        <briefdescription>
<para>Get application data pointer previously set by <ref refid="group__keystore_1gaf8062875af6cab5caabc3f13bf995807" kindref="member">DPS_SetKeyStoreData()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>keyStore</parametername>
</parameternamelist>
<parameterdescription>
<para>The keyStore</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the data or NULL if the key store is invalid </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="351" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>In-memory Key Store</header>
      <description><para>The implementation of an in-memory key store. </para></description>
      <memberdef kind="typedef" id="group__keystore_1ga57f11410b3ef6a686594b60836dc8c99" prot="public" static="no">
        <type>struct _DPS_MemoryKeyStore</type>
        <definition>typedef struct _DPS_MemoryKeyStore DPS_MemoryKeyStore</definition>
        <argsstring></argsstring>
        <name>DPS_MemoryKeyStore</name>
        <briefdescription>
<para>Opaque type for an in-memory key store. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="351" column="1" bodyfile="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" bodystart="364" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="group__keystore_1gaa54422ad8b44ef7e222e6d3b3d07f5df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__keystore_1ga57f11410b3ef6a686594b60836dc8c99" kindref="member">DPS_MemoryKeyStore</ref> *</type>
        <definition>DPS_MemoryKeyStore* DPS_CreateMemoryKeyStore</definition>
        <argsstring>(void)</argsstring>
        <name>DPS_CreateMemoryKeyStore</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Creates an in-memory key store. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The key store or NULL if there were no resources. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="371" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__keystore_1ga2f9f4aeff872ca74d5735a8727f4dbae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DPS_DestroyMemoryKeyStore</definition>
        <argsstring>(DPS_MemoryKeyStore *keyStore)</argsstring>
        <name>DPS_DestroyMemoryKeyStore</name>
        <param>
          <type><ref refid="group__keystore_1ga57f11410b3ef6a686594b60836dc8c99" kindref="member">DPS_MemoryKeyStore</ref> *</type>
          <declname>keyStore</declname>
        </param>
        <briefdescription>
<para>Destroys a previously created in-memory key store. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>keyStore</parametername>
</parameternamelist>
<parameterdescription>
<para>An in-memory key store </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="378" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__keystore_1ga1855a8efae53b90fa95aa5b97295c4ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__status_1ga30395a84d3cad9d4ec29848106415038" kindref="member">DPS_Status</ref></type>
        <definition>DPS_Status DPS_SetContentKey</definition>
        <argsstring>(DPS_MemoryKeyStore *keyStore, const DPS_KeyId *keyId, const DPS_Key *key)</argsstring>
        <name>DPS_SetContentKey</name>
        <param>
          <type><ref refid="group__keystore_1ga57f11410b3ef6a686594b60836dc8c99" kindref="member">DPS_MemoryKeyStore</ref> *</type>
          <declname>keyStore</declname>
        </param>
        <param>
          <type>const <ref refid="group__keystore_1ga4345e29dd2ad5d7fd88a1e988787bd72" kindref="member">DPS_KeyId</ref> *</type>
          <declname>keyId</declname>
        </param>
        <param>
          <type>const <ref refid="group__keystore_1gaa56a1429b6a1658e674eea558bdbbfc0" kindref="member">DPS_Key</ref> *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Create or replace a key with the specified key identifier in the key store. </para>        </briefdescription>
        <detaileddescription>
<para>Specify a previously set key identifier and a NULL key to remove a key from the key store.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>keyStore</parametername>
</parameternamelist>
<parameterdescription>
<para>An in-memory key store </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>keyId</parametername>
</parameternamelist>
<parameterdescription>
<para>The identifier of the key to create, replace, or remove </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The key</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DPS_OK or an error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="391" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__keystore_1ga8664b8c5cc2d3df6512ecb71e7f92212" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__status_1ga30395a84d3cad9d4ec29848106415038" kindref="member">DPS_Status</ref></type>
        <definition>DPS_Status DPS_SetNetworkKey</definition>
        <argsstring>(DPS_MemoryKeyStore *keyStore, const DPS_KeyId *keyId, const DPS_Key *key)</argsstring>
        <name>DPS_SetNetworkKey</name>
        <param>
          <type><ref refid="group__keystore_1ga57f11410b3ef6a686594b60836dc8c99" kindref="member">DPS_MemoryKeyStore</ref> *</type>
          <declname>keyStore</declname>
        </param>
        <param>
          <type>const <ref refid="group__keystore_1ga4345e29dd2ad5d7fd88a1e988787bd72" kindref="member">DPS_KeyId</ref> *</type>
          <declname>keyId</declname>
        </param>
        <param>
          <type>const <ref refid="group__keystore_1gaa56a1429b6a1658e674eea558bdbbfc0" kindref="member">DPS_Key</ref> *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Create or replace the network key in the key store. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>keyStore</parametername>
</parameternamelist>
<parameterdescription>
<para>An in-memory key store </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>keyId</parametername>
</parameternamelist>
<parameterdescription>
<para>The identifier of the key to create </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The key</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DPS_OK or an error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="402" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__keystore_1ga8d55f887ebbd6b0af80caa43bf77a088" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__status_1ga30395a84d3cad9d4ec29848106415038" kindref="member">DPS_Status</ref></type>
        <definition>DPS_Status DPS_SetTrustedCA</definition>
        <argsstring>(DPS_MemoryKeyStore *mks, const char *ca)</argsstring>
        <name>DPS_SetTrustedCA</name>
        <param>
          <type><ref refid="group__keystore_1ga57f11410b3ef6a686594b60836dc8c99" kindref="member">DPS_MemoryKeyStore</ref> *</type>
          <declname>mks</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>ca</declname>
        </param>
        <briefdescription>
<para>Create or replace the trusted CA(s) in the key store. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mks</parametername>
</parameternamelist>
<parameterdescription>
<para>An in-memory key store </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ca</parametername>
</parameternamelist>
<parameterdescription>
<para>The CA chain in PEM format</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DPS_OK or an error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="412" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__keystore_1ga7a8c6874dd5bff0a6391a5515b545e17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__status_1ga30395a84d3cad9d4ec29848106415038" kindref="member">DPS_Status</ref></type>
        <definition>DPS_Status DPS_SetCertificate</definition>
        <argsstring>(DPS_MemoryKeyStore *mks, const char *cert, const char *key, const char *password)</argsstring>
        <name>DPS_SetCertificate</name>
        <param>
          <type><ref refid="group__keystore_1ga57f11410b3ef6a686594b60836dc8c99" kindref="member">DPS_MemoryKeyStore</ref> *</type>
          <declname>mks</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>cert</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>password</declname>
        </param>
        <briefdescription>
<para>Create or replace a certificate in the key store. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mks</parametername>
</parameternamelist>
<parameterdescription>
<para>An in-memory key store </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cert</parametername>
</parameternamelist>
<parameterdescription>
<para>The certificate in PEM format </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The optional private key in PEM format </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>password</parametername>
</parameternamelist>
<parameterdescription>
<para>The optional password protecting the key, may be NULL</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DPS_OK or an error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="425" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__keystore_1ga2811c4ffff51bd75a72dd0a9c8796616" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__keystore_1gaf3833cfe48f848f698514bc5daa075fa" kindref="member">DPS_KeyStore</ref> *</type>
        <definition>DPS_KeyStore* DPS_MemoryKeyStoreHandle</definition>
        <argsstring>(DPS_MemoryKeyStore *keyStore)</argsstring>
        <name>DPS_MemoryKeyStoreHandle</name>
        <param>
          <type><ref refid="group__keystore_1ga57f11410b3ef6a686594b60836dc8c99" kindref="member">DPS_MemoryKeyStore</ref> *</type>
          <declname>keyStore</declname>
        </param>
        <briefdescription>
<para>Returns the <computeroutput>DPS_KeyStore*</computeroutput> of an in-memory key store. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>keyStore</parametername>
</parameternamelist>
<parameterdescription>
<para>An in-memory key store</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The DPS_KeyStore* or NULL </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="435" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="dps_8h_1ad8b397975a479b996ef223367d8835a9" prot="public" static="no">
        <name>DPS_FALSE</name>
        <initializer>0</initializer>
        <briefdescription>
<para>FALSE boolean value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="46" column="9" bodyfile="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__node_1gafd432f0081728dbac4634bf395b73219" prot="public" static="no">
        <name>DPS_LINK_LOSS_TIMEOUT</name>
        <initializer>30000</initializer>
        <briefdescription>
<para>This establishes the base rate at which keep-alive subscription messages are sent to remote nodes. </para>        </briefdescription>
        <detaileddescription>
<para>This timeout governs how long it takes to detect a mesh disconnect and start a recovery process. This timeout value should be much larger than DPS_SUBSCRIPTION_UPDATE_RATE. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="575" column="9" bodyfile="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" bodystart="575" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__node_1gac939c83361ed89086f37c78d9c9009dd" prot="public" static="no">
        <name>DPS_MCAST_PUB_DISABLED</name>
        <initializer>0</initializer>
        <briefdescription>
<para>Disable multicast send and receive on the node. </para>        </briefdescription>
        <detaileddescription>
<para>See <computeroutput>mcastPub</computeroutput> of <ref refid="group__node_1ga538588a1e2ea805377a90ac22ee6bc82" kindref="member">DPS_StartNode()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="485" column="9" bodyfile="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" bodystart="485" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__node_1gae493573fb2e02b87258952223eb4fcd7" prot="public" static="no">
        <name>DPS_MCAST_PUB_ENABLE_RECV</name>
        <initializer>2</initializer>
        <briefdescription>
<para>Enable multicast receive on the node. </para>        </briefdescription>
        <detaileddescription>
<para>See <computeroutput>mcastPub</computeroutput> of <ref refid="group__node_1ga538588a1e2ea805377a90ac22ee6bc82" kindref="member">DPS_StartNode()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="495" column="9" bodyfile="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" bodystart="495" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__node_1ga178a3a6450eeff450820fa34fd82049c" prot="public" static="no">
        <name>DPS_MCAST_PUB_ENABLE_SEND</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Enable multicast send on the node. </para>        </briefdescription>
        <detaileddescription>
<para>See <computeroutput>mcastPub</computeroutput> of <ref refid="group__node_1ga538588a1e2ea805377a90ac22ee6bc82" kindref="member">DPS_StartNode()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="490" column="9" bodyfile="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" bodystart="490" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__node_1ga89df880f9650da5730fa152642c0be9f" prot="public" static="no">
        <name>DPS_SUBSCRIPTION_UPDATE_RATE</name>
        <initializer>2000</initializer>
        <briefdescription>
<para>The default maximum rate (in msecs) to compute and send out subscription updates. </para>        </briefdescription>
        <detaileddescription>
<para>This causes subscription updates coming in from multiple remote nodes to be batched up for forwarding. This reduces network traffic when new nodes join the mesh, particularly at startup time, at the cost of increased latency for the propagation of subscriptions across the mesh. New subscriptions local to a node are not subject to this timeout value and are set immediately to adjacent nodes. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="567" column="9" bodyfile="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" bodystart="567" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dps_8h_1a4a173ed2665cea74e58558d99b377ab3" prot="public" static="no">
        <name>DPS_TRUE</name>
        <initializer>1</initializer>
        <briefdescription>
<para>TRUE boolean value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="45" column="9" bodyfile="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__publication_1gaf8615f0bcd3d95859cd7f2cdbf772e23" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* DPS_AcknowledgementHandler) (DPS_Publication *pub, uint8_t *payload, size_t len)</definition>
        <argsstring>)(DPS_Publication *pub, uint8_t *payload, size_t len)</argsstring>
        <name>DPS_AcknowledgementHandler</name>
        <briefdescription>
<para>Function prototype for a publication acknowledgement handler called when an acknowledgement for a publication is received from a remote subscriber. </para>        </briefdescription>
        <detaileddescription>
<para>The handler is called for each subscriber that generates an acknowledgement so may be called numerous times for same publication.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pub</parametername>
</parameternamelist>
<parameterdescription>
<para>Opaque handle for the publication that was received </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>payload</parametername>
</parameternamelist>
<parameterdescription>
<para>Payload accompanying the acknowledgement if any </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the payload </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="838" column="1" bodyfile="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" bodystart="838" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__publication_1ga5d62f70df03e7faf06494e89d74e346c" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* DPS_AckPublicationBufsComplete) (DPS_Publication *pub, const DPS_Buffer *bufs, size_t numBufs, DPS_Status status, void *data)</definition>
        <argsstring>)(DPS_Publication *pub, const DPS_Buffer *bufs, size_t numBufs, DPS_Status status, void *data)</argsstring>
        <name>DPS_AckPublicationBufsComplete</name>
        <briefdescription>
<para>Called when <ref refid="group__publication_1gad1de82b1bebeb8f47cd755d5f7b6fadb" kindref="member">DPS_AckPublicationBufs()</ref> completes. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pub</parametername>
</parameternamelist>
<parameterdescription>
<para>The publication </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bufs</parametername>
</parameternamelist>
<parameterdescription>
<para>The payload buffers passed to <ref refid="group__publication_1gad1de82b1bebeb8f47cd755d5f7b6fadb" kindref="member">DPS_AckPublicationBufs()</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numBufs</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of payload buffers passed to <ref refid="group__publication_1gad1de82b1bebeb8f47cd755d5f7b6fadb" kindref="member">DPS_AckPublicationBufs()</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>The status of the publish </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Application data passed to <ref refid="group__publication_1gad1de82b1bebeb8f47cd755d5f7b6fadb" kindref="member">DPS_AckPublicationBufs()</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="992" column="1" bodyfile="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" bodystart="992" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__publication_1gaf93282d11ef2e1fbbfc66c57851f43a6" prot="public" static="no">
        <type>struct <ref refid="struct___d_p_s___buffer" kindref="compound">_DPS_Buffer</ref></type>
        <definition>typedef struct _DPS_Buffer  DPS_Buffer</definition>
        <argsstring></argsstring>
        <name>DPS_Buffer</name>
        <briefdescription>
<para>A buffer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="907" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__node_1ga4dd612ab965134321bb57fdb065f121c" prot="public" static="no">
        <type>struct _DPS_Node</type>
        <definition>typedef struct _DPS_Node DPS_Node</definition>
        <argsstring></argsstring>
        <name>DPS_Node</name>
        <briefdescription>
<para>Opaque type for a node. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="435" column="1" bodyfile="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" bodystart="450" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__nodeaddress_1ga9e9f56aa38e82b4edcef7eb81e9f5bd2" prot="public" static="no">
        <type>struct _DPS_NodeAddress</type>
        <definition>typedef struct _DPS_NodeAddress DPS_NodeAddress</definition>
        <argsstring></argsstring>
        <name>DPS_NodeAddress</name>
        <briefdescription>
<para>Opaque type for a remote node address. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="113" column="1" bodyfile="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__node_1ga1518af805c7ace335841784178bd8aec" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* DPS_OnLinkComplete) (DPS_Node *node, const DPS_NodeAddress *addr, DPS_Status status, void *data)</definition>
        <argsstring>)(DPS_Node *node, const DPS_NodeAddress *addr, DPS_Status status, void *data)</argsstring>
        <name>DPS_OnLinkComplete</name>
        <briefdescription>
<para>Function prototype for function called when a <ref refid="group__node_1gab7616642a79f637aa146b3b1a4ed0af8" kindref="member">DPS_Link()</ref> completes. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>The local node to use </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>The address of the remote node that was linked </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>Indicates if the link completed or failed. A status of DPS_ERR_EXISTS indicates the remote node is already linked. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Application data passed in the call to <ref refid="group__node_1gab7616642a79f637aa146b3b1a4ed0af8" kindref="member">DPS_Link()</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="622" column="1" bodyfile="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" bodystart="622" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__node_1ga50d9c5fa2ac1cfbecc7647ce885e2e16" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* DPS_OnLinkLoss) (DPS_Node *node, const DPS_NodeAddress *addr, void *data)</definition>
        <argsstring>)(DPS_Node *node, const DPS_NodeAddress *addr, void *data)</argsstring>
        <name>DPS_OnLinkLoss</name>
        <briefdescription>
<para>Function prototype for function called when a link is lossed. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>The local node that lost a link </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>The address of the remote node that was unlinked </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Application data passed in the call to <ref refid="group__node_1ga28d9d432839aad5ca777259bd17dae67" kindref="member">DPS_SetLinkLossCallback()</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="664" column="1" bodyfile="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" bodystart="664" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__node_1ga1e88cc9ca744782e36d58a022fe026c5" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* DPS_OnNodeDestroyed) (DPS_Node *node, void *data)</definition>
        <argsstring>)(DPS_Node *node, void *data)</argsstring>
        <name>DPS_OnNodeDestroyed</name>
        <briefdescription>
<para>Function prototype for callback function called when a node is destroyed. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>The node that was destroyed. This node is valid during the callback. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data passed to <ref refid="group__node_1ga85f5121f80411f5ab82449efe20b68dd" kindref="member">DPS_DestroyNode()</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="543" column="1" bodyfile="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" bodystart="543" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__node_1gac902cf51bb5a028549869056d0579233" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* DPS_OnNodeShutdown) (DPS_Node *node, void *data)</definition>
        <argsstring>)(DPS_Node *node, void *data)</argsstring>
        <name>DPS_OnNodeShutdown</name>
        <briefdescription>
<para>Function prototype for callback function called when a node is shutdown. </para>        </briefdescription>
        <detaileddescription>
<para>Shutdown cleanly unlinks any nodes from this node. <ref refid="group__node_1ga85f5121f80411f5ab82449efe20b68dd" kindref="member">DPS_DestroyNode()</ref> does not.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>The node that was shutdown. This node is valid during the callback. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data passed to <ref refid="group__node_1ga71d0a1ec941a5ac5f4e994e4cc5cb54e" kindref="member">DPS_ShutdownNode()</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="519" column="1" bodyfile="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" bodystart="519" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__publication_1ga06fbbcec4c0b2fa56da4264030271f4e" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* DPS_OnPublicationDestroyed) (DPS_Publication *pub)</definition>
        <argsstring>)(DPS_Publication *pub)</argsstring>
        <name>DPS_OnPublicationDestroyed</name>
        <briefdescription>
<para>Function prototype for callback function called when a publication is destroyed. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pub</parametername>
</parameternamelist>
<parameterdescription>
<para>The publication that was destroyed. This is valid during the callback. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="953" column="1" bodyfile="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" bodystart="953" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__node_1ga8777fdab3d67ab171bd1ed1322564367" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* DPS_OnResolveAddressComplete) (DPS_Node *node, const DPS_NodeAddress *addr, void *data)</definition>
        <argsstring>)(DPS_Node *node, const DPS_NodeAddress *addr, void *data)</argsstring>
        <name>DPS_OnResolveAddressComplete</name>
        <briefdescription>
<para>Function prototype for function called when a <ref refid="group__node_1gab78df7f4498b847ddb32fdd33d39ef0f" kindref="member">DPS_ResolveAddress()</ref> completes. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>The local node to use </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>The resolved address or NULL if the address could not be resolved </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Application data passed in the call to <ref refid="group__node_1gab78df7f4498b847ddb32fdd33d39ef0f" kindref="member">DPS_ResolveAddress()</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="686" column="1" bodyfile="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" bodystart="686" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__subscription_1ga79f97355d297343c1f772a2214daa73d" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* DPS_OnSubscriptionDestroyed) (DPS_Subscription *sub)</definition>
        <argsstring>)(DPS_Subscription *sub)</argsstring>
        <name>DPS_OnSubscriptionDestroyed</name>
        <briefdescription>
<para>Function prototype for callback function called when a subscription is destroyed. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sub</parametername>
</parameternamelist>
<parameterdescription>
<para>The subscription that was destroyed. This is valid during the callback. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="1155" column="1" bodyfile="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" bodystart="1155" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__node_1ga119b8d5d6d6ab2390b69d272c36f1414" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* DPS_OnUnlinkComplete) (DPS_Node *node, const DPS_NodeAddress *addr, void *data)</definition>
        <argsstring>)(DPS_Node *node, const DPS_NodeAddress *addr, void *data)</argsstring>
        <name>DPS_OnUnlinkComplete</name>
        <briefdescription>
<para>Function prototype for function called when a <ref refid="group__node_1ga18398ef1e81c5dba98a95da6d18b937e" kindref="member">DPS_Unlink()</ref> completes. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>The local node that was unlinked from a remote node </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>The address of the remote node that was unlinked </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Application data passed in the call to <ref refid="group__node_1ga18398ef1e81c5dba98a95da6d18b937e" kindref="member">DPS_Unlink()</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="643" column="1" bodyfile="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" bodystart="643" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__publication_1ga0d439693474aa54e27f3d45a054696ac" prot="public" static="no">
        <type>struct _DPS_Publication</type>
        <definition>typedef struct _DPS_Publication DPS_Publication</definition>
        <argsstring></argsstring>
        <name>DPS_Publication</name>
        <briefdescription>
<para>Opaque type for a publication. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="699" column="1" bodyfile="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" bodystart="712" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__subscription_1gab95ef1762636ad505c940744b8dce83f" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* DPS_PublicationHandler) (DPS_Subscription *sub, const DPS_Publication *pub, uint8_t *payload, size_t len)</definition>
        <argsstring>)(DPS_Subscription *sub, const DPS_Publication *pub, uint8_t *payload, size_t len)</argsstring>
        <name>DPS_PublicationHandler</name>
        <briefdescription>
<para>Function prototype for a publication handler called when a publication is received that matches a subscription. </para>        </briefdescription>
        <detaileddescription>
<para>Note that there is a possibility of false-positive matches.</para><para>The publication handle is only valid within the body of this callback function. <ref refid="group__publication_1ga41f31a8b63558e13d73d96de6086e5c4" kindref="member">DPS_CopyPublication()</ref> will make a partial copy of the publication that can be used later for example to call <ref refid="group__publication_1ga308074429a566ffb8d04d55bae520b04" kindref="member">DPS_AckPublication()</ref>.</para><para>The accessor functions <ref refid="group__publication_1gaba1ad3ee807b75a1281d334be06a12f7" kindref="member">DPS_PublicationGetUUID()</ref> and <ref refid="group__publication_1ga875b48217d861d4a9fa5471419d354e9" kindref="member">DPS_PublicationGetSequenceNum()</ref> return information about the received publication.</para><para>The accessor functions <ref refid="group__subscription_1gab0ad2c6806f8f44f27c70fff915b7e9a" kindref="member">DPS_SubscriptionGetNumTopics()</ref> and <ref refid="group__subscription_1gaacc63deda2f2d97cf3f44ca84784b2f6" kindref="member">DPS_SubscriptionGetTopic()</ref> return information about the subscription that was matched.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sub</parametername>
</parameternamelist>
<parameterdescription>
<para>Opaque handle for the subscription that was matched </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pub</parametername>
</parameternamelist>
<parameterdescription>
<para>Opaque handle for the publication that was received </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>payload</parametername>
</parameternamelist>
<parameterdescription>
<para>Payload from the publication if any </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the payload </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="1137" column="1" bodyfile="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" bodystart="1137" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__publication_1gaf1b7a008b10280f94a673e1b8e938e72" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* DPS_PublishBufsComplete) (DPS_Publication *pub, const DPS_Buffer *bufs, size_t numBufs, DPS_Status status, void *data)</definition>
        <argsstring>)(DPS_Publication *pub, const DPS_Buffer *bufs, size_t numBufs, DPS_Status status, void *data)</argsstring>
        <name>DPS_PublishBufsComplete</name>
        <briefdescription>
<para>Called when <ref refid="group__publication_1gad0efefd35f178638f0fd4decdc28e6a6" kindref="member">DPS_PublishBufs()</ref> completes. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pub</parametername>
</parameternamelist>
<parameterdescription>
<para>The publication </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bufs</parametername>
</parameternamelist>
<parameterdescription>
<para>The payload buffers passed to <ref refid="group__publication_1gad0efefd35f178638f0fd4decdc28e6a6" kindref="member">DPS_PublishBufs()</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numBufs</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of payload buffers passed to <ref refid="group__publication_1gad0efefd35f178638f0fd4decdc28e6a6" kindref="member">DPS_PublishBufs()</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>The status of the publish </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Application data passed to <ref refid="group__publication_1gad0efefd35f178638f0fd4decdc28e6a6" kindref="member">DPS_PublishBufs()</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="918" column="1" bodyfile="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" bodystart="918" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__subscription_1gadb927c4c1b7306867a75fc4288b54af7" prot="public" static="no">
        <type>struct _DPS_Subscription</type>
        <definition>typedef struct _DPS_Subscription DPS_Subscription</definition>
        <argsstring></argsstring>
        <name>DPS_Subscription</name>
        <briefdescription>
<para>Opaque type for a subscription. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="1031" column="1" bodyfile="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" bodystart="1044" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__publication_1ga9190b8fa3bad848fb428acd6c0c2b210" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="group__keystore_1ga4345e29dd2ad5d7fd88a1e988787bd72" kindref="member">DPS_KeyId</ref> *</type>
        <definition>const DPS_KeyId* DPS_AckGetSenderKeyId</definition>
        <argsstring>(const DPS_Publication *pub)</argsstring>
        <name>DPS_AckGetSenderKeyId</name>
        <param>
          <type>const <ref refid="group__publication_1ga0d439693474aa54e27f3d45a054696ac" kindref="member">DPS_Publication</ref> *</type>
          <declname>pub</declname>
        </param>
        <briefdescription>
<para>Get the key identifier of an acknowledgement, only valid with the body of the DPS_AcknowledgementHandler function. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pub</parametername>
</parameternamelist>
<parameterdescription>
<para>The pub parameter of DPS_AcknowledgementHandler</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The key identifier of the subscriber, may be NULL </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="1031" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__publication_1gac6d2481a76f2e14df45a6ed5d87ba070" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t DPS_AckGetSequenceNum</definition>
        <argsstring>(const DPS_Publication *pub)</argsstring>
        <name>DPS_AckGetSequenceNum</name>
        <param>
          <type>const <ref refid="group__publication_1ga0d439693474aa54e27f3d45a054696ac" kindref="member">DPS_Publication</ref> *</type>
          <declname>pub</declname>
        </param>
        <briefdescription>
<para>Get the sequence number being acknowledged, only valid with the body of the DPS_AcknowledgementHandler function. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pub</parametername>
</parameternamelist>
<parameterdescription>
<para>The pub parameter of DPS_AcknowledgementHandler</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The sequence number of the acknowledged publication. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="1021" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__publication_1ga308074429a566ffb8d04d55bae520b04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__status_1ga30395a84d3cad9d4ec29848106415038" kindref="member">DPS_Status</ref></type>
        <definition>DPS_Status DPS_AckPublication</definition>
        <argsstring>(const DPS_Publication *pub, const uint8_t *ackPayload, size_t len)</argsstring>
        <name>DPS_AckPublication</name>
        <param>
          <type>const <ref refid="group__publication_1ga0d439693474aa54e27f3d45a054696ac" kindref="member">DPS_Publication</ref> *</type>
          <declname>pub</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>ackPayload</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Acknowledge a publication. </para>        </briefdescription>
        <detaileddescription>
<para>A publication should be acknowledged as soon as possible after receipt, ideally from within the publication handler callback function. If the publication cannot be acknowledged immediately in the publication handler callback, call <ref refid="group__publication_1ga41f31a8b63558e13d73d96de6086e5c4" kindref="member">DPS_CopyPublication()</ref> to make a partial copy of the publication that can be passed to this function at a later time.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pub</parametername>
</parameternamelist>
<parameterdescription>
<para>The publication to acknowledge </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ackPayload</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional payload to accompany the acknowledgement </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the payload</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DPS_OK if acknowledge is successful, an error otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="981" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__publication_1gad1de82b1bebeb8f47cd755d5f7b6fadb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__status_1ga30395a84d3cad9d4ec29848106415038" kindref="member">DPS_Status</ref></type>
        <definition>DPS_Status DPS_AckPublicationBufs</definition>
        <argsstring>(const DPS_Publication *pub, const DPS_Buffer *bufs, size_t numBufs, DPS_AckPublicationBufsComplete cb, void *data)</argsstring>
        <name>DPS_AckPublicationBufs</name>
        <param>
          <type>const <ref refid="group__publication_1ga0d439693474aa54e27f3d45a054696ac" kindref="member">DPS_Publication</ref> *</type>
          <declname>pub</declname>
        </param>
        <param>
          <type>const <ref refid="group__publication_1gaf93282d11ef2e1fbbfc66c57851f43a6" kindref="member">DPS_Buffer</ref> *</type>
          <declname>bufs</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>numBufs</declname>
        </param>
        <param>
          <type><ref refid="group__publication_1ga5d62f70df03e7faf06494e89d74e346c" kindref="member">DPS_AckPublicationBufsComplete</ref></type>
          <declname>cb</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Acknowledge a publication. </para>        </briefdescription>
        <detaileddescription>
<para>A publication should be acknowledged as soon as possible after receipt, ideally from within the publication handler callback function. If the publication cannot be acknowledged immediately in the publication handler callback, call <ref refid="group__publication_1ga41f31a8b63558e13d73d96de6086e5c4" kindref="member">DPS_CopyPublication()</ref> to make a partial copy of the publication that can be passed to this function at a later time.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pub</parametername>
</parameternamelist>
<parameterdescription>
<para>The publication to acknowledge </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bufs</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional payload buffers - this memory must remain valid until the callback function is called </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numBufs</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of buffers </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback function called when the acknowledge is complete </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data to be passed to the callback function</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DPS_OK if acknowledge is successful, an error otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="1010" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__nodeaddress_1gace91591af9bf2a99bad07deda1b9176c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DPS_CopyAddress</definition>
        <argsstring>(DPS_NodeAddress *dest, const DPS_NodeAddress *src)</argsstring>
        <name>DPS_CopyAddress</name>
        <param>
          <type><ref refid="group__nodeaddress_1ga9e9f56aa38e82b4edcef7eb81e9f5bd2" kindref="member">DPS_NodeAddress</ref> *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>const <ref refid="group__nodeaddress_1ga9e9f56aa38e82b4edcef7eb81e9f5bd2" kindref="member">DPS_NodeAddress</ref> *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>Copy a node address. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>The address to copy to. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>The address to copy from. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="93" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__publication_1ga41f31a8b63558e13d73d96de6086e5c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__publication_1ga0d439693474aa54e27f3d45a054696ac" kindref="member">DPS_Publication</ref> *</type>
        <definition>DPS_Publication* DPS_CopyPublication</definition>
        <argsstring>(const DPS_Publication *pub)</argsstring>
        <name>DPS_CopyPublication</name>
        <param>
          <type>const <ref refid="group__publication_1ga0d439693474aa54e27f3d45a054696ac" kindref="member">DPS_Publication</ref> *</type>
          <declname>pub</declname>
        </param>
        <briefdescription>
<para>Creates a partial copy of a publication that can be used to acknowledge the publication. </para>        </briefdescription>
        <detaileddescription>
<para>The copy is not useful for anything other than in a call to <ref refid="group__publication_1ga308074429a566ffb8d04d55bae520b04" kindref="member">DPS_AckPublication()</ref> and should be freed by calling <ref refid="group__publication_1gaa14bbb3000222c9b168bca327a338ee7" kindref="member">DPS_DestroyPublication()</ref> when no longer needed.</para><para>The partial copy can be used with <ref refid="group__publication_1gaba1ad3ee807b75a1281d334be06a12f7" kindref="member">DPS_PublicationGetUUID()</ref> and <ref refid="group__publication_1ga875b48217d861d4a9fa5471419d354e9" kindref="member">DPS_PublicationGetSequenceNum()</ref></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pub</parametername>
</parameternamelist>
<parameterdescription>
<para>The publication to copy</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A partial copy of the publication or NULL if the publication could not be copied. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="807" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__nodeaddress_1ga8c6228133cac7601597f3c6160de5aab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__nodeaddress_1ga9e9f56aa38e82b4edcef7eb81e9f5bd2" kindref="member">DPS_NodeAddress</ref> *</type>
        <definition>DPS_NodeAddress* DPS_CreateAddress</definition>
        <argsstring>(void)</argsstring>
        <name>DPS_CreateAddress</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Creates a node address. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The created address, or NULL if creation failed </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="75" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__node_1gaf6641b5bbf27b2c45ac7f926b0ce4efe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__node_1ga4dd612ab965134321bb57fdb065f121c" kindref="member">DPS_Node</ref> *</type>
        <definition>DPS_Node* DPS_CreateNode</definition>
        <argsstring>(const char *separators, DPS_KeyStore *keyStore, const DPS_KeyId *keyId)</argsstring>
        <name>DPS_CreateNode</name>
        <param>
          <type>const char *</type>
          <declname>separators</declname>
        </param>
        <param>
          <type><ref refid="group__keystore_1gaf3833cfe48f848f698514bc5daa075fa" kindref="member">DPS_KeyStore</ref> *</type>
          <declname>keyStore</declname>
        </param>
        <param>
          <type>const <ref refid="group__keystore_1ga4345e29dd2ad5d7fd88a1e988787bd72" kindref="member">DPS_KeyId</ref> *</type>
          <declname>keyId</declname>
        </param>
        <briefdescription>
<para>Allocates space for a local DPS node. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>separators</parametername>
</parameternamelist>
<parameterdescription>
<para>The separator characters to use for topic matching, if NULL defaults to &quot;/&quot; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>keyStore</parametername>
</parameternamelist>
<parameterdescription>
<para>The key store to use for this node </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>keyId</parametername>
</parameternamelist>
<parameterdescription>
<para>The key identifier of this node</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The uninitialized node or NULL if there were no resources for the node. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="461" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__publication_1gaca070a96a6374e99a05d647c10737962" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__publication_1ga0d439693474aa54e27f3d45a054696ac" kindref="member">DPS_Publication</ref> *</type>
        <definition>DPS_Publication* DPS_CreatePublication</definition>
        <argsstring>(DPS_Node *node)</argsstring>
        <name>DPS_CreatePublication</name>
        <param>
          <type><ref refid="group__node_1ga4dd612ab965134321bb57fdb065f121c" kindref="member">DPS_Node</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Allocates storage for a publication. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>The local node to use</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The newly created publication, or NULL if creation failed </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="794" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__subscription_1ga4095bb00bd0ca7fa9614ebbc2c28199f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__subscription_1gadb927c4c1b7306867a75fc4288b54af7" kindref="member">DPS_Subscription</ref> *</type>
        <definition>DPS_Subscription* DPS_CreateSubscription</definition>
        <argsstring>(DPS_Node *node, const char **topics, size_t numTopics)</argsstring>
        <name>DPS_CreateSubscription</name>
        <param>
          <type><ref refid="group__node_1ga4dd612ab965134321bb57fdb065f121c" kindref="member">DPS_Node</ref> *</type>
          <declname>node</declname>
        </param>
        <param>
          <type>const char **</type>
          <declname>topics</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>numTopics</declname>
        </param>
        <briefdescription>
<para>Allocate memory for a subscription and initialize topics. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>The local node to use </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>topics</parametername>
</parameternamelist>
<parameterdescription>
<para>The topic strings to match </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numTopics</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of topic strings to match - must be &gt;= 1</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The newly created subscription or NULL if resources could not be allocated or the arguments were invalid </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="1075" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__nodeaddress_1ga1f373831e8009ff5959ccb02b8c3fb14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DPS_DestroyAddress</definition>
        <argsstring>(DPS_NodeAddress *addr)</argsstring>
        <name>DPS_DestroyAddress</name>
        <param>
          <type><ref refid="group__nodeaddress_1ga9e9f56aa38e82b4edcef7eb81e9f5bd2" kindref="member">DPS_NodeAddress</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Frees resources associated with an address. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>A previously created address. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="100" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__node_1ga85f5121f80411f5ab82449efe20b68dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__status_1ga30395a84d3cad9d4ec29848106415038" kindref="member">DPS_Status</ref></type>
        <definition>DPS_Status DPS_DestroyNode</definition>
        <argsstring>(DPS_Node *node, DPS_OnNodeDestroyed cb, void *data)</argsstring>
        <name>DPS_DestroyNode</name>
        <param>
          <type><ref refid="group__node_1ga4dd612ab965134321bb57fdb065f121c" kindref="member">DPS_Node</ref> *</type>
          <declname>node</declname>
        </param>
        <param>
          <type><ref refid="group__node_1ga1e88cc9ca744782e36d58a022fe026c5" kindref="member">DPS_OnNodeDestroyed</ref></type>
          <declname>cb</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Destroys a node and free any resources. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>The node to destroy </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback function to be called when the node is destroyed </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data to be passed to the callback function</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><itemizedlist>
<listitem><para>DPS_OK if the node will be destroyed and the callback called</para></listitem><listitem><para>DPS_ERR_NULL node or cb was null</para></listitem><listitem><para>Or an error status code in which case the callback will not be called. </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="557" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__publication_1gaa14bbb3000222c9b168bca327a338ee7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__status_1ga30395a84d3cad9d4ec29848106415038" kindref="member">DPS_Status</ref></type>
        <definition>DPS_Status DPS_DestroyPublication</definition>
        <argsstring>(DPS_Publication *pub, DPS_OnPublicationDestroyed cb)</argsstring>
        <name>DPS_DestroyPublication</name>
        <param>
          <type><ref refid="group__publication_1ga0d439693474aa54e27f3d45a054696ac" kindref="member">DPS_Publication</ref> *</type>
          <declname>pub</declname>
        </param>
        <param>
          <type><ref refid="group__publication_1ga06fbbcec4c0b2fa56da4264030271f4e" kindref="member">DPS_OnPublicationDestroyed</ref></type>
          <declname>cb</declname>
        </param>
        <briefdescription>
<para>Delete a publication and frees any resources allocated. </para>        </briefdescription>
        <detaileddescription>
<para>This does not cancel retained publications that have an unexpired TTL. To expire a retained publication call <ref refid="group__publication_1ga828a4efc5c235c48a81f6460cc3fe416" kindref="member">DPS_Publish()</ref> with a negative TTL.</para><para>This function should only be called for publications created by <ref refid="group__publication_1gaca070a96a6374e99a05d647c10737962" kindref="member">DPS_CreatePublication()</ref> or <ref refid="group__publication_1ga41f31a8b63558e13d73d96de6086e5c4" kindref="member">DPS_CopyPublication()</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pub</parametername>
</parameternamelist>
<parameterdescription>
<para>The publication to destroy </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback function to be called when the publication is destroyed</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DPS_OK if destroy is successful, an error otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="967" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__subscription_1ga1b43ab9f71e6ebcd6e7981a5d8fbc000" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__status_1ga30395a84d3cad9d4ec29848106415038" kindref="member">DPS_Status</ref></type>
        <definition>DPS_Status DPS_DestroySubscription</definition>
        <argsstring>(DPS_Subscription *sub, DPS_OnSubscriptionDestroyed cb)</argsstring>
        <name>DPS_DestroySubscription</name>
        <param>
          <type><ref refid="group__subscription_1gadb927c4c1b7306867a75fc4288b54af7" kindref="member">DPS_Subscription</ref> *</type>
          <declname>sub</declname>
        </param>
        <param>
          <type><ref refid="group__subscription_1ga79f97355d297343c1f772a2214daa73d" kindref="member">DPS_OnSubscriptionDestroyed</ref></type>
          <declname>cb</declname>
        </param>
        <briefdescription>
<para>Stop subscribing to the subscription topic and free resources allocated for the subscription. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sub</parametername>
</parameternamelist>
<parameterdescription>
<para>The subscription to destroy </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback function to be called when the subscription is destroyed</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DPS_OK if destroy is successful, an error otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="1165" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__node_1ga32b12f0e54f0cd66b46f2a47378c6aeb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="group__nodeaddress_1ga9e9f56aa38e82b4edcef7eb81e9f5bd2" kindref="member">DPS_NodeAddress</ref> *</type>
        <definition>const DPS_NodeAddress* DPS_GetListenAddress</definition>
        <argsstring>(DPS_Node *node)</argsstring>
        <name>DPS_GetListenAddress</name>
        <param>
          <type><ref refid="group__node_1ga4dd612ab965134321bb57fdb065f121c" kindref="member">DPS_Node</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Get the address this node is listening for connections on. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>The node</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The address </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="600" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__node_1gac1caa8f004d43a5d0f4ef69715a53145" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* DPS_GetListenAddressString</definition>
        <argsstring>(DPS_Node *node)</argsstring>
        <name>DPS_GetListenAddressString</name>
        <param>
          <type><ref refid="group__node_1ga4dd612ab965134321bb57fdb065f121c" kindref="member">DPS_Node</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Get text representation of the address this node is listening for connections on. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>The node</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A text string for the address </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="610" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__node_1ga65bba7bcfe5e940b153fcced4e2e8880" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* DPS_GetNodeData</definition>
        <argsstring>(const DPS_Node *node)</argsstring>
        <name>DPS_GetNodeData</name>
        <param>
          <type>const <ref refid="group__node_1ga4dd612ab965134321bb57fdb065f121c" kindref="member">DPS_Node</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Get application data pointer previously set by <ref refid="group__node_1gad19cf4272ba11e935654175c83db2ce1" kindref="member">DPS_SetNodeData()</ref> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>The node</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the data or NULL if the node is invalid </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="480" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__publication_1gaa8bee35089ac62289c9ba0e6a0568ca0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* DPS_GetPublicationData</definition>
        <argsstring>(const DPS_Publication *pub)</argsstring>
        <name>DPS_GetPublicationData</name>
        <param>
          <type>const <ref refid="group__publication_1ga0d439693474aa54e27f3d45a054696ac" kindref="member">DPS_Publication</ref> *</type>
          <declname>pub</declname>
        </param>
        <briefdescription>
<para>Get application data pointer previously set by <ref refid="group__publication_1ga91c46ccb6df7f4bb99ca5d9d35cc5a4a" kindref="member">DPS_SetPublicationData()</ref> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pub</parametername>
</parameternamelist>
<parameterdescription>
<para>The publication</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the data or NULL if the publication is invalid </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="826" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__subscription_1ga88ab2284734f099ef67bcc60997142b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* DPS_GetSubscriptionData</definition>
        <argsstring>(DPS_Subscription *sub)</argsstring>
        <name>DPS_GetSubscriptionData</name>
        <param>
          <type><ref refid="group__subscription_1gadb927c4c1b7306867a75fc4288b54af7" kindref="member">DPS_Subscription</ref> *</type>
          <declname>sub</declname>
        </param>
        <briefdescription>
<para>Get application data pointer previously set by <ref refid="group__subscription_1gad581d341003e20c714061e44b57c2009" kindref="member">DPS_SetSubscriptionData()</ref> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sub</parametername>
</parameternamelist>
<parameterdescription>
<para>The subscription</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the data or NULL if the subscription is invalid </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="1094" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__publication_1ga7b0709e28cb34d5a30b90e4142cd6c19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__status_1ga30395a84d3cad9d4ec29848106415038" kindref="member">DPS_Status</ref></type>
        <definition>DPS_Status DPS_InitPublication</definition>
        <argsstring>(DPS_Publication *pub, const char **topics, size_t numTopics, int noWildCard, const DPS_KeyId *keyId, DPS_AcknowledgementHandler handler)</argsstring>
        <name>DPS_InitPublication</name>
        <param>
          <type><ref refid="group__publication_1ga0d439693474aa54e27f3d45a054696ac" kindref="member">DPS_Publication</ref> *</type>
          <declname>pub</declname>
        </param>
        <param>
          <type>const char **</type>
          <declname>topics</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>numTopics</declname>
        </param>
        <param>
          <type>int</type>
          <declname>noWildCard</declname>
        </param>
        <param>
          <type>const <ref refid="group__keystore_1ga4345e29dd2ad5d7fd88a1e988787bd72" kindref="member">DPS_KeyId</ref> *</type>
          <declname>keyId</declname>
        </param>
        <param>
          <type><ref refid="group__publication_1gaf8615f0bcd3d95859cd7f2cdbf772e23" kindref="member">DPS_AcknowledgementHandler</ref></type>
          <declname>handler</declname>
        </param>
        <briefdescription>
<para>Initializes a newly created publication with a set of topics. </para>        </briefdescription>
        <detaileddescription>
<para>Each publication has a UUID and a sequence number. The sequence number is incremented each time the publication is published. This allows subscriber to determine that publications received form a series. The acknowledgement handler is optional, if present the publication is marked as requesting acknowledgement and that information is provided to the subscribers.</para><para>Call the accessor function <ref refid="group__publication_1gaba1ad3ee807b75a1281d334be06a12f7" kindref="member">DPS_PublicationGetUUID()</ref> to get the UUID for this publication.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pub</parametername>
</parameternamelist>
<parameterdescription>
<para>The publication to initialize </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>topics</parametername>
</parameternamelist>
<parameterdescription>
<para>The topic strings to publish </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numTopics</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of topic strings to publish - must be &gt;= 1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>noWildCard</parametername>
</parameternamelist>
<parameterdescription>
<para>If TRUE the publication will not match wildcard subscriptions </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>keyId</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional key identifier to use for encrypted publications </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional handler for receiving acknowledgements</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DPS_OK if initialization is successful, an error otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="858" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__node_1gab7616642a79f637aa146b3b1a4ed0af8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__status_1ga30395a84d3cad9d4ec29848106415038" kindref="member">DPS_Status</ref></type>
        <definition>DPS_Status DPS_Link</definition>
        <argsstring>(DPS_Node *node, const char *addrText, DPS_OnLinkComplete cb, void *data)</argsstring>
        <name>DPS_Link</name>
        <param>
          <type><ref refid="group__node_1ga4dd612ab965134321bb57fdb065f121c" kindref="member">DPS_Node</ref> *</type>
          <declname>node</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>addrText</declname>
        </param>
        <param>
          <type><ref refid="group__node_1ga1518af805c7ace335841784178bd8aec" kindref="member">DPS_OnLinkComplete</ref></type>
          <declname>cb</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Link the local node to a remote node. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>The local node to use </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addrText</parametername>
</parameternamelist>
<parameterdescription>
<para>The text string of the address to link to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>The callback function to call on completion </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Application data to be passed to the callback</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DPS_OK or an error status. If an error status is returned the callback function will not be called. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="634" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__nodeaddress_1gafc7b21048f92370ca29325d6245b576d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* DPS_NodeAddrToString</definition>
        <argsstring>(const DPS_NodeAddress *addr)</argsstring>
        <name>DPS_NodeAddrToString</name>
        <param>
          <type>const <ref refid="group__nodeaddress_1ga9e9f56aa38e82b4edcef7eb81e9f5bd2" kindref="member">DPS_NodeAddress</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Get text representation of an address. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function uses a thread-local string buffer.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>to get the text for</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A text string for the address </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="68" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__publication_1ga91471ddf6f66798e255b28b3e913144b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__status_1ga30395a84d3cad9d4ec29848106415038" kindref="member">DPS_Status</ref></type>
        <definition>DPS_Status DPS_PublicationAddSubId</definition>
        <argsstring>(DPS_Publication *pub, const DPS_KeyId *keyId)</argsstring>
        <name>DPS_PublicationAddSubId</name>
        <param>
          <type><ref refid="group__publication_1ga0d439693474aa54e27f3d45a054696ac" kindref="member">DPS_Publication</ref> *</type>
          <declname>pub</declname>
        </param>
        <param>
          <type>const <ref refid="group__keystore_1ga4345e29dd2ad5d7fd88a1e988787bd72" kindref="member">DPS_KeyId</ref> *</type>
          <declname>keyId</declname>
        </param>
        <briefdescription>
<para>Adds a key identifier to use for encrypted publications. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pub</parametername>
</parameternamelist>
<parameterdescription>
<para>The publication to initialize </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>keyId</parametername>
</parameternamelist>
<parameterdescription>
<para>Key identifier to use for encrypted publications</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DPS_OK if addition is successful, an error otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="873" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__publication_1gad2a37d52f12c93434b431eefd732f363" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__node_1ga4dd612ab965134321bb57fdb065f121c" kindref="member">DPS_Node</ref> *</type>
        <definition>DPS_Node* DPS_PublicationGetNode</definition>
        <argsstring>(const DPS_Publication *pub)</argsstring>
        <name>DPS_PublicationGetNode</name>
        <param>
          <type>const <ref refid="group__publication_1ga0d439693474aa54e27f3d45a054696ac" kindref="member">DPS_Publication</ref> *</type>
          <declname>pub</declname>
        </param>
        <briefdescription>
<para>Get the local node associated with a publication. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pub</parametername>
</parameternamelist>
<parameterdescription>
<para>The publication</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The node or NULL if the publication is invalid </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="785" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__publication_1gaee6fc3b13484faacff0d26646778f777" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t DPS_PublicationGetNumTopics</definition>
        <argsstring>(const DPS_Publication *pub)</argsstring>
        <name>DPS_PublicationGetNumTopics</name>
        <param>
          <type>const <ref refid="group__publication_1ga0d439693474aa54e27f3d45a054696ac" kindref="member">DPS_Publication</ref> *</type>
          <declname>pub</declname>
        </param>
        <briefdescription>
<para>Get the number of topics in a publication. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pub</parametername>
</parameternamelist>
<parameterdescription>
<para>The publication</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of topics. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="758" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__publication_1ga1d7e81c2f0b19736a4f7a7195e5bd98d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="group__keystore_1ga4345e29dd2ad5d7fd88a1e988787bd72" kindref="member">DPS_KeyId</ref> *</type>
        <definition>const DPS_KeyId* DPS_PublicationGetSenderKeyId</definition>
        <argsstring>(const DPS_Publication *pub)</argsstring>
        <name>DPS_PublicationGetSenderKeyId</name>
        <param>
          <type>const <ref refid="group__publication_1ga0d439693474aa54e27f3d45a054696ac" kindref="member">DPS_Publication</ref> *</type>
          <declname>pub</declname>
        </param>
        <briefdescription>
<para>Get the key identifier of a publication. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pub</parametername>
</parameternamelist>
<parameterdescription>
<para>The publication</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The key identifier of the publisher, may be NULL </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="776" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__publication_1ga875b48217d861d4a9fa5471419d354e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t DPS_PublicationGetSequenceNum</definition>
        <argsstring>(const DPS_Publication *pub)</argsstring>
        <name>DPS_PublicationGetSequenceNum</name>
        <param>
          <type>const <ref refid="group__publication_1ga0d439693474aa54e27f3d45a054696ac" kindref="member">DPS_Publication</ref> *</type>
          <declname>pub</declname>
        </param>
        <briefdescription>
<para>Get the sequence number for a publication. </para>        </briefdescription>
        <detaileddescription>
<para>Serial numbers are always &gt; 0.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pub</parametername>
</parameternamelist>
<parameterdescription>
<para>The publication</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The sequence number or zero if the publication is invalid. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="730" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__publication_1ga143a5c6fbe0bdf1725e841f122582432" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* DPS_PublicationGetTopic</definition>
        <argsstring>(const DPS_Publication *pub, size_t index)</argsstring>
        <name>DPS_PublicationGetTopic</name>
        <param>
          <type>const <ref refid="group__publication_1ga0d439693474aa54e27f3d45a054696ac" kindref="member">DPS_Publication</ref> *</type>
          <declname>pub</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Get a topic for a publication. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pub</parametername>
</parameternamelist>
<parameterdescription>
<para>The publication </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The topic index</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The topic string or NULL if the publication or index is invalid. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="749" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__publication_1ga6d8eee29e0c15db182598c7439232e1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int16_t</type>
        <definition>int16_t DPS_PublicationGetTTL</definition>
        <argsstring>(const DPS_Publication *pub)</argsstring>
        <name>DPS_PublicationGetTTL</name>
        <param>
          <type>const <ref refid="group__publication_1ga0d439693474aa54e27f3d45a054696ac" kindref="member">DPS_Publication</ref> *</type>
          <declname>pub</declname>
        </param>
        <briefdescription>
<para>Get the TTL for a publication. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pub</parametername>
</parameternamelist>
<parameterdescription>
<para>The publication</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Time to live in seconds - maximum TTL is about 9 hours </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="739" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__publication_1gaba1ad3ee807b75a1281d334be06a12f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="group__uuid_1gaef1d03afcc6410602ade1d48f24c3997" kindref="member">DPS_UUID</ref> *</type>
        <definition>const DPS_UUID* DPS_PublicationGetUUID</definition>
        <argsstring>(const DPS_Publication *pub)</argsstring>
        <name>DPS_PublicationGetUUID</name>
        <param>
          <type>const <ref refid="group__publication_1ga0d439693474aa54e27f3d45a054696ac" kindref="member">DPS_Publication</ref> *</type>
          <declname>pub</declname>
        </param>
        <briefdescription>
<para>Get the UUID for a publication. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pub</parametername>
</parameternamelist>
<parameterdescription>
<para>The publication</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The UUID if publication is valid, or NULL otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="721" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__publication_1ga516f7f314c7b95210751d00285758b9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int DPS_PublicationIsAckRequested</definition>
        <argsstring>(const DPS_Publication *pub)</argsstring>
        <name>DPS_PublicationIsAckRequested</name>
        <param>
          <type>const <ref refid="group__publication_1ga0d439693474aa54e27f3d45a054696ac" kindref="member">DPS_Publication</ref> *</type>
          <declname>pub</declname>
        </param>
        <briefdescription>
<para>Check if an acknowledgement was requested for a publication. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pub</parametername>
</parameternamelist>
<parameterdescription>
<para>The publication</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if an acknowledgement was requested, otherwise 0. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="767" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__publication_1gaa5225be2733d6ebfd01f9475e3fc06f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DPS_PublicationRemoveSubId</definition>
        <argsstring>(DPS_Publication *pub, const DPS_KeyId *keyId)</argsstring>
        <name>DPS_PublicationRemoveSubId</name>
        <param>
          <type><ref refid="group__publication_1ga0d439693474aa54e27f3d45a054696ac" kindref="member">DPS_Publication</ref> *</type>
          <declname>pub</declname>
        </param>
        <param>
          <type>const <ref refid="group__keystore_1ga4345e29dd2ad5d7fd88a1e988787bd72" kindref="member">DPS_KeyId</ref> *</type>
          <declname>keyId</declname>
        </param>
        <briefdescription>
<para>Removes a key identifier to use for encrypted publications. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pub</parametername>
</parameternamelist>
<parameterdescription>
<para>The publication to initialize </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>keyId</parametername>
</parameternamelist>
<parameterdescription>
<para>Key identifier to remove </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="881" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__publication_1ga828a4efc5c235c48a81f6460cc3fe416" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__status_1ga30395a84d3cad9d4ec29848106415038" kindref="member">DPS_Status</ref></type>
        <definition>DPS_Status DPS_Publish</definition>
        <argsstring>(DPS_Publication *pub, const uint8_t *pubPayload, size_t len, int16_t ttl)</argsstring>
        <name>DPS_Publish</name>
        <param>
          <type><ref refid="group__publication_1ga0d439693474aa54e27f3d45a054696ac" kindref="member">DPS_Publication</ref> *</type>
          <declname>pub</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>pubPayload</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>ttl</declname>
        </param>
        <briefdescription>
<para>Publish a set of topics along with an optional payload. </para>        </briefdescription>
        <detaileddescription>
<para>The topics will be published immediately to matching subscribers and then re-published whenever a new matching subscription is received.</para><para>Call the accessor function <ref refid="group__publication_1gaba1ad3ee807b75a1281d334be06a12f7" kindref="member">DPS_PublicationGetUUID()</ref> to get the UUID for this publication. Call the accessor function <ref refid="group__publication_1ga875b48217d861d4a9fa5471419d354e9" kindref="member">DPS_PublicationGetSequenceNum()</ref> to get the current sequence number for this publication. The sequence number is incremented each time <ref refid="group__publication_1ga828a4efc5c235c48a81f6460cc3fe416" kindref="member">DPS_Publish()</ref> is called for the same publication.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pub</parametername>
</parameternamelist>
<parameterdescription>
<para>The publication to send </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pubPayload</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional payload </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the payload </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ttl</parametername>
</parameternamelist>
<parameterdescription>
<para>Time to live in seconds - maximum TTL is about 9 hours</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DPS_OK if the topics were successfully published </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="899" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__publication_1gad0efefd35f178638f0fd4decdc28e6a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__status_1ga30395a84d3cad9d4ec29848106415038" kindref="member">DPS_Status</ref></type>
        <definition>DPS_Status DPS_PublishBufs</definition>
        <argsstring>(DPS_Publication *pub, const DPS_Buffer *bufs, size_t numBufs, int16_t ttl, DPS_PublishBufsComplete cb, void *data)</argsstring>
        <name>DPS_PublishBufs</name>
        <param>
          <type><ref refid="group__publication_1ga0d439693474aa54e27f3d45a054696ac" kindref="member">DPS_Publication</ref> *</type>
          <declname>pub</declname>
        </param>
        <param>
          <type>const <ref refid="group__publication_1gaf93282d11ef2e1fbbfc66c57851f43a6" kindref="member">DPS_Buffer</ref> *</type>
          <declname>bufs</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>numBufs</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>ttl</declname>
        </param>
        <param>
          <type><ref refid="group__publication_1gaf1b7a008b10280f94a673e1b8e938e72" kindref="member">DPS_PublishBufsComplete</ref></type>
          <declname>cb</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Publish a set of topics along with an optional payload. </para>        </briefdescription>
        <detaileddescription>
<para>The topics will be published immediately to matching subscribers and then re-published whenever a new matching subscription is received.</para><para>Call the accessor function <ref refid="group__publication_1gaba1ad3ee807b75a1281d334be06a12f7" kindref="member">DPS_PublicationGetUUID()</ref> to get the UUID for this publication. Call the accessor function <ref refid="group__publication_1ga875b48217d861d4a9fa5471419d354e9" kindref="member">DPS_PublicationGetSequenceNum()</ref> to get the current sequence number for this publication. The sequence number is incremented each time <ref refid="group__publication_1ga828a4efc5c235c48a81f6460cc3fe416" kindref="member">DPS_Publish()</ref> is called for the same publication.</para><para><simplesect kind="note"><para>When the ttl is greater than zero, the callback function will not be called until the publication expires, is replaced by a subsequent call to <ref refid="group__publication_1gad0efefd35f178638f0fd4decdc28e6a6" kindref="member">DPS_PublishBufs()</ref>, is canceled, or is destroyed.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pub</parametername>
</parameternamelist>
<parameterdescription>
<para>The publication to send </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bufs</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional payload buffers - this memory must remain valid until the callback function is called </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numBufs</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of buffers </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ttl</parametername>
</parameternamelist>
<parameterdescription>
<para>Time to live in seconds - maximum TTL is about 9 hours </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback function called when the publish is complete </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data to be passed to the callback function</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DPS_OK if the topics were successfully published </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="944" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__node_1gab78df7f4498b847ddb32fdd33d39ef0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__status_1ga30395a84d3cad9d4ec29848106415038" kindref="member">DPS_Status</ref></type>
        <definition>DPS_Status DPS_ResolveAddress</definition>
        <argsstring>(DPS_Node *node, const char *host, const char *service, DPS_OnResolveAddressComplete cb, void *data)</argsstring>
        <name>DPS_ResolveAddress</name>
        <param>
          <type><ref refid="group__node_1ga4dd612ab965134321bb57fdb065f121c" kindref="member">DPS_Node</ref> *</type>
          <declname>node</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>host</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>service</declname>
        </param>
        <param>
          <type><ref refid="group__node_1ga8777fdab3d67ab171bd1ed1322564367" kindref="member">DPS_OnResolveAddressComplete</ref></type>
          <declname>cb</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Resolve a host name or IP address and service name or port number. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>The local node to use </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>host</parametername>
</parameternamelist>
<parameterdescription>
<para>The host name or IP address to resolve </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>service</parametername>
</parameternamelist>
<parameterdescription>
<para>The port or service name to resolve </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>The callback function to call on completion </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Application data to be passed to the callback</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DPS_OK or an error status. If an error status is returned the callback function will not be called. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="699" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__nodeaddress_1ga1492aff0a8789c4b8a7cc47c84ca1b1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__nodeaddress_1ga9e9f56aa38e82b4edcef7eb81e9f5bd2" kindref="member">DPS_NodeAddress</ref> *</type>
        <definition>DPS_NodeAddress* DPS_SetAddress</definition>
        <argsstring>(DPS_NodeAddress *addr, const char *addrText)</argsstring>
        <name>DPS_SetAddress</name>
        <param>
          <type><ref refid="group__nodeaddress_1ga9e9f56aa38e82b4edcef7eb81e9f5bd2" kindref="member">DPS_NodeAddress</ref> *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>addrText</declname>
        </param>
        <briefdescription>
<para>Set a node address. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>The address to set </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addrText</parametername>
</parameternamelist>
<parameterdescription>
<para>The text string for the address</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The addr passed in, or NULL if an error occurred </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="85" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__node_1ga28d9d432839aad5ca777259bd17dae67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__status_1ga30395a84d3cad9d4ec29848106415038" kindref="member">DPS_Status</ref></type>
        <definition>DPS_Status DPS_SetLinkLossCallback</definition>
        <argsstring>(DPS_Node *node, DPS_OnLinkLoss cb, void *data)</argsstring>
        <name>DPS_SetLinkLossCallback</name>
        <param>
          <type><ref refid="group__node_1ga4dd612ab965134321bb57fdb065f121c" kindref="member">DPS_Node</ref> *</type>
          <declname>node</declname>
        </param>
        <param>
          <type><ref refid="group__node_1ga50d9c5fa2ac1cfbecc7647ce885e2e16" kindref="member">DPS_OnLinkLoss</ref></type>
          <declname>cb</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Set a callback function to called when a link explicily established by this node was lost. </para>        </briefdescription>
        <detaileddescription>
<para>This function is only called in the case of a surprise link-loss, not when <ref refid="group__node_1ga18398ef1e81c5dba98a95da6d18b937e" kindref="member">DPS_Unlink()</ref> was called.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>The local node </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>The callback function to call on loss of a link </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Application data to be passed to the callback</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DPS_OK if successful, an error otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="677" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__node_1gad19cf4272ba11e935654175c83db2ce1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__status_1ga30395a84d3cad9d4ec29848106415038" kindref="member">DPS_Status</ref></type>
        <definition>DPS_Status DPS_SetNodeData</definition>
        <argsstring>(DPS_Node *node, void *data)</argsstring>
        <name>DPS_SetNodeData</name>
        <param>
          <type><ref refid="group__node_1ga4dd612ab965134321bb57fdb065f121c" kindref="member">DPS_Node</ref> *</type>
          <declname>node</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Store a pointer to application data in a node. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>The node </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The data pointer to store</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DPS_OK or an error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="471" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__node_1ga96fbb20dc7d5a30a8fc5eefd181f69c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DPS_SetNodeLinkLossTimeout</definition>
        <argsstring>(DPS_Node *node, uint32_t linkLossMsecs)</argsstring>
        <name>DPS_SetNodeLinkLossTimeout</name>
        <param>
          <type><ref refid="group__node_1ga4dd612ab965134321bb57fdb065f121c" kindref="member">DPS_Node</ref> *</type>
          <declname>node</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>linkLossMsecs</declname>
        </param>
        <briefdescription>
<para>Override the default link-loss detection timeout (in msecs) </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>The node </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>linkLossMsecs</parametername>
</parameternamelist>
<parameterdescription>
<para>The time for the link to an unresponsive remote node to be considered lost </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="591" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__node_1gac7e33476c06009ed42a6ea6f3c53380a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DPS_SetNodeSubscriptionUpdateDelay</definition>
        <argsstring>(DPS_Node *node, uint32_t subsRateMsecs)</argsstring>
        <name>DPS_SetNodeSubscriptionUpdateDelay</name>
        <param>
          <type><ref refid="group__node_1ga4dd612ab965134321bb57fdb065f121c" kindref="member">DPS_Node</ref> *</type>
          <declname>node</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>subsRateMsecs</declname>
        </param>
        <briefdescription>
<para>Override the default time delay (in msecs) between subscription updates. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>The node </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>subsRateMsecs</parametername>
</parameternamelist>
<parameterdescription>
<para>The time delay (in msecs) between updates </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="583" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__publication_1ga91c46ccb6df7f4bb99ca5d9d35cc5a4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__status_1ga30395a84d3cad9d4ec29848106415038" kindref="member">DPS_Status</ref></type>
        <definition>DPS_Status DPS_SetPublicationData</definition>
        <argsstring>(DPS_Publication *pub, void *data)</argsstring>
        <name>DPS_SetPublicationData</name>
        <param>
          <type><ref refid="group__publication_1ga0d439693474aa54e27f3d45a054696ac" kindref="member">DPS_Publication</ref> *</type>
          <declname>pub</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Store a pointer to application data in a publication. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pub</parametername>
</parameternamelist>
<parameterdescription>
<para>The publication </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The data pointer to store</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DPS_OK or an error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="817" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__subscription_1gad581d341003e20c714061e44b57c2009" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__status_1ga30395a84d3cad9d4ec29848106415038" kindref="member">DPS_Status</ref></type>
        <definition>DPS_Status DPS_SetSubscriptionData</definition>
        <argsstring>(DPS_Subscription *sub, void *data)</argsstring>
        <name>DPS_SetSubscriptionData</name>
        <param>
          <type><ref refid="group__subscription_1gadb927c4c1b7306867a75fc4288b54af7" kindref="member">DPS_Subscription</ref> *</type>
          <declname>sub</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Store a pointer to application data in a subscription. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sub</parametername>
</parameternamelist>
<parameterdescription>
<para>The subscription </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The data pointer to store</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DPS_OK or an error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="1085" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__node_1ga71d0a1ec941a5ac5f4e994e4cc5cb54e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__status_1ga30395a84d3cad9d4ec29848106415038" kindref="member">DPS_Status</ref></type>
        <definition>DPS_Status DPS_ShutdownNode</definition>
        <argsstring>(DPS_Node *node, DPS_OnNodeShutdown cb, void *data)</argsstring>
        <name>DPS_ShutdownNode</name>
        <param>
          <type><ref refid="group__node_1ga4dd612ab965134321bb57fdb065f121c" kindref="member">DPS_Node</ref> *</type>
          <declname>node</declname>
        </param>
        <param>
          <type><ref refid="group__node_1gac902cf51bb5a028549869056d0579233" kindref="member">DPS_OnNodeShutdown</ref></type>
          <declname>cb</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Shutdowns a node. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>The node to shutdown </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback function to be called when the node is shutdown </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data to be passed to the callback function</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><itemizedlist>
<listitem><para>DPS_OK if the node will be shutdown and the callback called</para></listitem><listitem><para>DPS_ERR_NULL node or cb was null</para></listitem><listitem><para>Or an error status code in which case the callback will not be called. </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="533" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__node_1ga538588a1e2ea805377a90ac22ee6bc82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__status_1ga30395a84d3cad9d4ec29848106415038" kindref="member">DPS_Status</ref></type>
        <definition>DPS_Status DPS_StartNode</definition>
        <argsstring>(DPS_Node *node, int mcastPub, DPS_NodeAddress *listenAddr)</argsstring>
        <name>DPS_StartNode</name>
        <param>
          <type><ref refid="group__node_1ga4dd612ab965134321bb57fdb065f121c" kindref="member">DPS_Node</ref> *</type>
          <declname>node</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mcastPub</declname>
        </param>
        <param>
          <type><ref refid="group__nodeaddress_1ga9e9f56aa38e82b4edcef7eb81e9f5bd2" kindref="member">DPS_NodeAddress</ref> *</type>
          <declname>listenAddr</declname>
        </param>
        <briefdescription>
<para>Initialized and starts running a local node. </para>        </briefdescription>
        <detaileddescription>
<para>Node can only be started once.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>The node </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mcastPub</parametername>
</parameternamelist>
<parameterdescription>
<para>Indicates if this node sends or listens for multicast publications </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>listenAddr</parametername>
</parameternamelist>
<parameterdescription>
<para>If non-NULL identifies specific address to listen on</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DPS_OK or various error status codes </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="506" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__subscription_1ga83234ea82a91e07e3f5894a4dcf5267e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__status_1ga30395a84d3cad9d4ec29848106415038" kindref="member">DPS_Status</ref></type>
        <definition>DPS_Status DPS_Subscribe</definition>
        <argsstring>(DPS_Subscription *sub, DPS_PublicationHandler handler)</argsstring>
        <name>DPS_Subscribe</name>
        <param>
          <type><ref refid="group__subscription_1gadb927c4c1b7306867a75fc4288b54af7" kindref="member">DPS_Subscription</ref> *</type>
          <declname>sub</declname>
        </param>
        <param>
          <type><ref refid="group__subscription_1gab95ef1762636ad505c940744b8dce83f" kindref="member">DPS_PublicationHandler</ref></type>
          <declname>handler</declname>
        </param>
        <briefdescription>
<para>Start subscribing to a set of topics. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sub</parametername>
</parameternamelist>
<parameterdescription>
<para>The subscription to start </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback function to be called with topic matches</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DPS_OK if start is successful, an error otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="1147" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__subscription_1ga218210cd3bece2cf8e6e4ce4d81c773a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__status_1ga30395a84d3cad9d4ec29848106415038" kindref="member">DPS_Status</ref></type>
        <definition>DPS_Status DPS_SubscribeExpired</definition>
        <argsstring>(DPS_Subscription *sub, int enable)</argsstring>
        <name>DPS_SubscribeExpired</name>
        <param>
          <type><ref refid="group__subscription_1gadb927c4c1b7306867a75fc4288b54af7" kindref="member">DPS_Subscription</ref> *</type>
          <declname>sub</declname>
        </param>
        <param>
          <type>int</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Call the publication handler when a matching retained publication expires. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="group__publication_1ga6d8eee29e0c15db182598c7439232e1c" kindref="member">DPS_PublicationGetTTL()</ref> will return a negative value when the publication is expired.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sub</parametername>
</parameternamelist>
<parameterdescription>
<para>The subscription </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>enable</parametername>
</parameternamelist>
<parameterdescription>
<para>DPS_TRUE to call handler, DPS_FALSE to not call handler</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DPS_OK or an error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="1116" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__subscription_1gafea65751c811555736c8c65fcb3a9480" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__node_1ga4dd612ab965134321bb57fdb065f121c" kindref="member">DPS_Node</ref> *</type>
        <definition>DPS_Node* DPS_SubscriptionGetNode</definition>
        <argsstring>(const DPS_Subscription *sub)</argsstring>
        <name>DPS_SubscriptionGetNode</name>
        <param>
          <type>const <ref refid="group__subscription_1gadb927c4c1b7306867a75fc4288b54af7" kindref="member">DPS_Subscription</ref> *</type>
          <declname>sub</declname>
        </param>
        <briefdescription>
<para>Get the local node associated with a subscription. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sub</parametername>
</parameternamelist>
<parameterdescription>
<para>The subscription</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The node or NULL if the subscription is invalid </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="1103" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__subscription_1gab0ad2c6806f8f44f27c70fff915b7e9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t DPS_SubscriptionGetNumTopics</definition>
        <argsstring>(const DPS_Subscription *sub)</argsstring>
        <name>DPS_SubscriptionGetNumTopics</name>
        <param>
          <type>const <ref refid="group__subscription_1gadb927c4c1b7306867a75fc4288b54af7" kindref="member">DPS_Subscription</ref> *</type>
          <declname>sub</declname>
        </param>
        <briefdescription>
<para>Get the number of topics registered with an active subscription. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sub</parametername>
</parameternamelist>
<parameterdescription>
<para>The subscription</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of topics. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="1063" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__subscription_1gaacc63deda2f2d97cf3f44ca84784b2f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* DPS_SubscriptionGetTopic</definition>
        <argsstring>(const DPS_Subscription *sub, size_t index)</argsstring>
        <name>DPS_SubscriptionGetTopic</name>
        <param>
          <type>const <ref refid="group__subscription_1gadb927c4c1b7306867a75fc4288b54af7" kindref="member">DPS_Subscription</ref> *</type>
          <declname>sub</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Get a topic for an active subscription. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sub</parametername>
</parameternamelist>
<parameterdescription>
<para>The subscription </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The topic index</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The topic string or NULL if the subscription or index is invalid. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="1054" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__node_1ga18398ef1e81c5dba98a95da6d18b937e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__status_1ga30395a84d3cad9d4ec29848106415038" kindref="member">DPS_Status</ref></type>
        <definition>DPS_Status DPS_Unlink</definition>
        <argsstring>(DPS_Node *node, const DPS_NodeAddress *addr, DPS_OnUnlinkComplete cb, void *data)</argsstring>
        <name>DPS_Unlink</name>
        <param>
          <type><ref refid="group__node_1ga4dd612ab965134321bb57fdb065f121c" kindref="member">DPS_Node</ref> *</type>
          <declname>node</declname>
        </param>
        <param>
          <type>const <ref refid="group__nodeaddress_1ga9e9f56aa38e82b4edcef7eb81e9f5bd2" kindref="member">DPS_NodeAddress</ref> *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="group__node_1ga119b8d5d6d6ab2390b69d272c36f1414" kindref="member">DPS_OnUnlinkComplete</ref></type>
          <declname>cb</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Unlink a local node from a remote node. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>The local node to use </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>The address of the remote node to unlink from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>The callback function to call on completion, can be NULL which case the function is synchronous </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Application data to be passed to the callback</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DPS_OK or an error status. If an error status is returned the callback function will not be called. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h" line="655" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Public APIs. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dps.h"/>
  </compounddef>
</doxygen>
