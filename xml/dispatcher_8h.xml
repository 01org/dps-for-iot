<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="dispatcher_8h" kind="file" language="C++">
    <compoundname>dispatcher.h</compoundname>
    <includes refid="err_8h" local="no">dps/err.h</includes>
    <includes refid="dps_8h" local="no">dps/dps.h</includes>
    <incdepgraph>
      <node id="18">
        <label>dispatcher.h</label>
        <link refid="dispatcher_8h"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>stdint.h</label>
      </node>
      <node id="22">
        <label>stddef.h</label>
      </node>
      <node id="19">
        <label>dps/err.h</label>
        <link refid="err_8h"/>
      </node>
      <node id="20">
        <label>dps/dps.h</label>
        <link refid="dps_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>sys/socket.h</label>
      </node>
      <node id="24">
        <label>dps/uuid.h</label>
        <link refid="uuid_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__dispatcher_1gaa2f5404cdd3f68106cdbde1d3dc48750" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* DPS_DelayedFunc) (DPS_Node *node, void *data)</definition>
        <argsstring>)(DPS_Node *node, void *data)</argsstring>
        <name>DPS_DelayedFunc</name>
        <briefdescription>
<para>Prototype for a delayed dispatched function call. </para>        </briefdescription>
        <detaileddescription>
<para>This function will be called on the main (internal) node thread and must not block. The dispatcher is internal and not exposed in this usage.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>The node used for this dispatcher </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The data passed to the DPS_CallDelayedFunc() call </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dispatcher.h" line="97" column="1" bodyfile="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dispatcher.h" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__dispatcher_1ga1bfb58a5543b2d500f30c0f55118f8cb" prot="public" static="no">
        <type>struct _DPS_Dispatcher</type>
        <definition>typedef struct _DPS_Dispatcher DPS_Dispatcher</definition>
        <argsstring></argsstring>
        <name>DPS_Dispatcher</name>
        <briefdescription>
<para>Opaque type for an dispatcher. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dispatcher.h" line="111" column="1" bodyfile="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dispatcher.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__dispatcher_1ga005155f87fc9d2d2489adf27c92241e2" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* DPS_DispatchFunc) (DPS_Node *node, DPS_Dispatcher *dispatcher, void *data)</definition>
        <argsstring>)(DPS_Node *node, DPS_Dispatcher *dispatcher, void *data)</argsstring>
        <name>DPS_DispatchFunc</name>
        <briefdescription>
<para>Prototype for function to be called by a dispatcher. </para>        </briefdescription>
        <detaileddescription>
<para>This function will be called on the main (internal) node thread and must not block.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>The node used for this dispatcher </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dispatcher</parametername>
</parameternamelist>
<parameterdescription>
<para>The dispatcher for this call </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The data passed to the <ref refid="group__dispatcher_1gad64d2a6a83b80400cacb82f257d26cd1" kindref="member">DPS_Dispatch()</ref> call </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dispatcher.h" line="57" column="1" bodyfile="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dispatcher.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__dispatcher_1ga8e3c5b78450f0d1a044c3a0c861c6ba5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__dispatcher_1ga1bfb58a5543b2d500f30c0f55118f8cb" kindref="member">DPS_Dispatcher</ref> *</type>
        <definition>DPS_Dispatcher* DPS_CreateDispatcher</definition>
        <argsstring>(DPS_Node *node, DPS_DispatchFunc func)</argsstring>
        <name>DPS_CreateDispatcher</name>
        <param>
          <type><ref refid="group__node_1ga4dd612ab965134321bb57fdb065f121c" kindref="member">DPS_Node</ref> *</type>
          <declname>node</declname>
        </param>
        <param>
          <type><ref refid="group__dispatcher_1ga005155f87fc9d2d2489adf27c92241e2" kindref="member">DPS_DispatchFunc</ref></type>
          <declname>func</declname>
        </param>
        <briefdescription>
<para>Create a dispatcher and register the function to be called. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>The node to be used for this dispatcher </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para>The function to be called </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The created dispatcher, or NULL if creation failed </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dispatcher.h" line="66" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__dispatcher_1ga53ce24929216914fadc8afe9b643a3fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DPS_DestroyDispatcher</definition>
        <argsstring>(DPS_Dispatcher *dispatcher)</argsstring>
        <name>DPS_DestroyDispatcher</name>
        <param>
          <type><ref refid="group__dispatcher_1ga1bfb58a5543b2d500f30c0f55118f8cb" kindref="member">DPS_Dispatcher</ref> *</type>
          <declname>dispatcher</declname>
        </param>
        <briefdescription>
<para>Destroy a dispatcher and free resources. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dispatcher</parametername>
</parameternamelist>
<parameterdescription>
<para>The dispatcher to destroy </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dispatcher.h" line="87" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__dispatcher_1gad64d2a6a83b80400cacb82f257d26cd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__status_1ga30395a84d3cad9d4ec29848106415038" kindref="member">DPS_Status</ref></type>
        <definition>DPS_Status DPS_Dispatch</definition>
        <argsstring>(DPS_Dispatcher *dispatcher, void *data, int delay)</argsstring>
        <name>DPS_Dispatch</name>
        <param>
          <type><ref refid="group__dispatcher_1ga1bfb58a5543b2d500f30c0f55118f8cb" kindref="member">DPS_Dispatcher</ref> *</type>
          <declname>dispatcher</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>delay</declname>
        </param>
        <briefdescription>
<para>Call the function registered when the dispatcher was created. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dispatcher</parametername>
</parameternamelist>
<parameterdescription>
<para>The dispatcher to call </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data to be passed to the function </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delay</parametername>
</parameternamelist>
<parameterdescription>
<para>Time delay in millseconds before the function will be called</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><itemizedlist>
<listitem><para>DPS_OK if the function call is scheduled</para></listitem><listitem><para>DPS_ERR_BUSY if the dispatcher cannot schedule the function</para></listitem><listitem><para>Or an error status code in which case the callback will not be called. </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dispatcher.h" line="80" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__dispatcher_1ga36b2069111a875c1e76944ddb024fbd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__status_1ga30395a84d3cad9d4ec29848106415038" kindref="member">DPS_Status</ref></type>
        <definition>DPS_Status DPS_ScheduleCall</definition>
        <argsstring>(DPS_Node *node, DPS_DelayedFunc func, void *data, int delay)</argsstring>
        <name>DPS_ScheduleCall</name>
        <param>
          <type><ref refid="group__node_1ga4dd612ab965134321bb57fdb065f121c" kindref="member">DPS_Node</ref> *</type>
          <declname>node</declname>
        </param>
        <param>
          <type><ref refid="group__dispatcher_1gaa2f5404cdd3f68106cdbde1d3dc48750" kindref="member">DPS_DelayedFunc</ref></type>
          <declname>func</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>delay</declname>
        </param>
        <briefdescription>
<para>Wrapper function that creates a dispatcher and schedules a function to be called after a delay. </para>        </briefdescription>
        <detaileddescription>
<para>The dispatcher is destroyed after the function has been called.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>The node to be used for the internal dispatcher </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para>The function to be called </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data to be passed to the function </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delay</parametername>
</parameternamelist>
<parameterdescription>
<para>Time delay in millseconds before the function will be called</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><itemizedlist>
<listitem><para>DPS_OK if the function call is scheduled</para></listitem><listitem><para>DPS_ERR_BUSY if the dispatcher cannot schedule the function</para></listitem><listitem><para>Or an error status code in which case the callback will not be called. </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dispatcher.h" line="113" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Register functions to be called after a timeout period expires. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/tmalsbar/src/github.com/intel/dps-for-iot/inc/dps/dispatcher.h"/>
  </compounddef>
</doxygen>
