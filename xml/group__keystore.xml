<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__keystore" kind="group">
    <compoundname>keystore</compoundname>
    <title>Key Store</title>
    <innerclass refid="struct___d_p_s___key" prot="public">_DPS_Key</innerclass>
    <innerclass refid="struct___d_p_s___key_cert" prot="public">_DPS_KeyCert</innerclass>
    <innerclass refid="struct___d_p_s___key_e_c" prot="public">_DPS_KeyEC</innerclass>
    <innerclass refid="struct___d_p_s___key_id" prot="public">_DPS_KeyId</innerclass>
    <innerclass refid="struct___d_p_s___key_symmetric" prot="public">_DPS_KeySymmetric</innerclass>
      <sectiondef kind="user-defined">
      <header>KeyStore</header>
      <description><para>Hooks for implementing an application-defined key store. </para></description>
      <memberdef kind="enum" id="group__keystore_1ga7ca1045749c725e9c4a1b4758b2a0196" prot="public" static="no">
        <name>DPS_KeyType</name>
        <enumvalue id="group__keystore_1gga7ca1045749c725e9c4a1b4758b2a0196a662c1e84628d96be8ae08163af382392" prot="public">
          <name>DPS_KEY_SYMMETRIC</name>
          <briefdescription>
<para>DPS_KeySymmetric. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__keystore_1gga7ca1045749c725e9c4a1b4758b2a0196a58453a89367757e523ac337232387d89" prot="public">
          <name>DPS_KEY_EC</name>
          <briefdescription>
<para>DPS_KeyEC. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__keystore_1gga7ca1045749c725e9c4a1b4758b2a0196a04e294e477af49e6a4927884f45fcb99" prot="public">
          <name>DPS_KEY_EC_CERT</name>
          <briefdescription>
<para>DPS_KeyCert. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>A DPS key type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/01org/dps-for-iot/inc/dps/dps.h" line="114" column="1" bodyfile="/home/tmalsbar/src/github.com/01org/dps-for-iot/inc/dps/dps.h" bodystart="114" bodyend="118"/>
      </memberdef>
      <memberdef kind="enum" id="group__keystore_1ga9ba152af7a3ed9076bfa597ef918cac1" prot="public" static="no">
        <name>DPS_ECCurve</name>
        <enumvalue id="group__keystore_1gga9ba152af7a3ed9076bfa597ef918cac1a4b56a9b3ab7d0e23d57bad72f0c93239" prot="public">
          <name>DPS_EC_CURVE_RESERVED</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__keystore_1gga9ba152af7a3ed9076bfa597ef918cac1a359e576be45def67ea14b96c7bfbe100" prot="public">
          <name>DPS_EC_CURVE_P384</name>
          <initializer>= 2</initializer>
          <briefdescription>
<para>NIST P-384 also known as secp384r1. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__keystore_1gga9ba152af7a3ed9076bfa597ef918cac1abb97d4a693a02becf44c12b6e4678724" prot="public">
          <name>DPS_EC_CURVE_P521</name>
          <initializer>= 3</initializer>
          <briefdescription>
<para>NIST P-521 also known as secp521r1. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Allowed elliptic curves. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/01org/dps-for-iot/inc/dps/dps.h" line="135" column="1" bodyfile="/home/tmalsbar/src/github.com/01org/dps-for-iot/inc/dps/dps.h" bodystart="135" bodyend="139"/>
      </memberdef>
      <memberdef kind="typedef" id="group__keystore_1ga4c58e71301ab14e675033c601e4eabe1" prot="public" static="no">
        <type>struct <ref refid="struct___d_p_s___key_symmetric" kindref="compound">_DPS_KeySymmetric</ref></type>
        <definition>typedef struct _DPS_KeySymmetric  DPS_KeySymmetric</definition>
        <argsstring></argsstring>
        <name>DPS_KeySymmetric</name>
        <briefdescription>
<para>Symmetric key data. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Need to define this outside of DPS_Key to satisfy SWIG. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/01org/dps-for-iot/inc/dps/dps.h" line="128" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__keystore_1ga658140277e0cd5c6ccc3b7727ecaae8a" prot="public" static="no">
        <type>struct <ref refid="struct___d_p_s___key_e_c" kindref="compound">_DPS_KeyEC</ref></type>
        <definition>typedef struct _DPS_KeyEC  DPS_KeyEC</definition>
        <argsstring></argsstring>
        <name>DPS_KeyEC</name>
        <briefdescription>
<para>Elliptic curve key data. </para>        </briefdescription>
        <detaileddescription>
<para>Only <computeroutput>x</computeroutput> and <computeroutput>y</computeroutput> are needed for a public key. Similarly, only <computeroutput>d</computeroutput> is needed for a private key.</para><para><simplesect kind="note"><para>Need to define this outside of DPS_Key to satisfy SWIG. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/01org/dps-for-iot/inc/dps/dps.h" line="154" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__keystore_1ga98b6701b118cab76965736ad720f9bcf" prot="public" static="no">
        <type>struct <ref refid="struct___d_p_s___key_cert" kindref="compound">_DPS_KeyCert</ref></type>
        <definition>typedef struct _DPS_KeyCert  DPS_KeyCert</definition>
        <argsstring></argsstring>
        <name>DPS_KeyCert</name>
        <briefdescription>
<para>Certificate key data. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Need to define this outside of DPS_Key to satisfy SWIG. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/01org/dps-for-iot/inc/dps/dps.h" line="165" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__keystore_1gaa56a1429b6a1658e674eea558bdbbfc0" prot="public" static="no">
        <type>struct <ref refid="struct___d_p_s___key" kindref="compound">_DPS_Key</ref></type>
        <definition>typedef struct _DPS_Key  DPS_Key</definition>
        <argsstring></argsstring>
        <name>DPS_Key</name>
        <briefdescription>
<para>Union of supported key types. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/01org/dps-for-iot/inc/dps/dps.h" line="178" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__keystore_1ga4345e29dd2ad5d7fd88a1e988787bd72" prot="public" static="no">
        <type>struct <ref refid="struct___d_p_s___key_id" kindref="compound">_DPS_KeyId</ref></type>
        <definition>typedef struct _DPS_KeyId  DPS_KeyId</definition>
        <argsstring></argsstring>
        <name>DPS_KeyId</name>
        <briefdescription>
<para>An identifier of a key in a key store. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/01org/dps-for-iot/inc/dps/dps.h" line="186" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__keystore_1gaf3833cfe48f848f698514bc5daa075fa" prot="public" static="no">
        <type>struct _DPS_KeyStore</type>
        <definition>typedef struct _DPS_KeyStore DPS_KeyStore</definition>
        <argsstring></argsstring>
        <name>DPS_KeyStore</name>
        <briefdescription>
<para>Opaque type for a key store. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/01org/dps-for-iot/inc/dps/dps.h" line="94" column="1" bodyfile="/home/tmalsbar/src/github.com/01org/dps-for-iot/inc/dps/dps.h" bodystart="191" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__keystore_1ga7c3e50965b65334e9791780fa855ed16" prot="public" static="no">
        <type>struct _DPS_KeyStoreRequest</type>
        <definition>typedef struct _DPS_KeyStoreRequest DPS_KeyStoreRequest</definition>
        <argsstring></argsstring>
        <name>DPS_KeyStoreRequest</name>
        <briefdescription>
<para>Opaque type for a key store request. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/01org/dps-for-iot/inc/dps/dps.h" line="94" column="1" bodyfile="/home/tmalsbar/src/github.com/01org/dps-for-iot/inc/dps/dps.h" bodystart="196" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__keystore_1ga83d3ade4f4acd7d4385d606270ddfd29" prot="public" static="no">
        <type><ref refid="group__status_1ga30395a84d3cad9d4ec29848106415038" kindref="member">DPS_Status</ref>(*</type>
        <definition>typedef DPS_Status(* DPS_KeyAndIdHandler) (DPS_KeyStoreRequest *request)</definition>
        <argsstring>)(DPS_KeyStoreRequest *request)</argsstring>
        <name>DPS_KeyAndIdHandler</name>
        <briefdescription>
<para>Function prototype for a key store handler called when a key and key identifier is requested. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="group__keystore_1ga289b1c74c01c9988f04297aa082986de" kindref="member">DPS_SetKeyAndId()</ref> should be called to provide the key and identifier to the caller.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>request</parametername>
</parameternamelist>
<parameterdescription>
<para>The request, only valid with the body of this callback function.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><itemizedlist>
<listitem><para>DPS_OK when <ref refid="group__keystore_1ga289b1c74c01c9988f04297aa082986de" kindref="member">DPS_SetKeyAndId()</ref> succeeds</para></listitem><listitem><para>DPS_ERR_MISSING when no key is configured for this host</para></listitem><listitem><para>error otherwise </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/01org/dps-for-iot/inc/dps/dps.h" line="213" column="1" bodyfile="/home/tmalsbar/src/github.com/01org/dps-for-iot/inc/dps/dps.h" bodystart="213" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__keystore_1gaccf7e3d43bc1e586132d7f1ae03d02f7" prot="public" static="no">
        <type><ref refid="group__status_1ga30395a84d3cad9d4ec29848106415038" kindref="member">DPS_Status</ref>(*</type>
        <definition>typedef DPS_Status(* DPS_KeyHandler) (DPS_KeyStoreRequest *request, const DPS_KeyId *keyId)</definition>
        <argsstring>)(DPS_KeyStoreRequest *request, const DPS_KeyId *keyId)</argsstring>
        <name>DPS_KeyHandler</name>
        <briefdescription>
<para>Function prototype for a key store handler called when a key with the provided key identifier is requested. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="group__keystore_1ga15d6a9b8256b67c2ec8b1d365a98dbab" kindref="member">DPS_SetKey()</ref> should be called to provide the key to the caller.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>request</parametername>
</parameternamelist>
<parameterdescription>
<para>The request, only valid with the body of this callback function. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>keyId</parametername>
</parameternamelist>
<parameterdescription>
<para>The identifier of the key to provide.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><itemizedlist>
<listitem><para>DPS_OK when <ref refid="group__keystore_1ga15d6a9b8256b67c2ec8b1d365a98dbab" kindref="member">DPS_SetKey()</ref> succeeds</para></listitem><listitem><para>DPS_ERR_MISSING when no key is located</para></listitem><listitem><para>error otherwise </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/01org/dps-for-iot/inc/dps/dps.h" line="230" column="1" bodyfile="/home/tmalsbar/src/github.com/01org/dps-for-iot/inc/dps/dps.h" bodystart="230" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__keystore_1ga5b4cf102912eea802196d3e307c399ef" prot="public" static="no">
        <type><ref refid="group__status_1ga30395a84d3cad9d4ec29848106415038" kindref="member">DPS_Status</ref>(*</type>
        <definition>typedef DPS_Status(* DPS_EphemeralKeyHandler) (DPS_KeyStoreRequest *request, const DPS_Key *key)</definition>
        <argsstring>)(DPS_KeyStoreRequest *request, const DPS_Key *key)</argsstring>
        <name>DPS_EphemeralKeyHandler</name>
        <briefdescription>
<para>Function prototype for a key store handler called when an ephemeral key with the provided type is requested. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="group__keystore_1ga15d6a9b8256b67c2ec8b1d365a98dbab" kindref="member">DPS_SetKey()</ref> should be called to provide the ephemeral key to the caller.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>request</parametername>
</parameternamelist>
<parameterdescription>
<para>The request, only valid with the body of this callback function. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The requested key type and parameters (e.g. key-&gt;type is DPS_KEY_EC and key-&gt;ec.curve is DPS_EC_CURVE_P521).</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><itemizedlist>
<listitem><para>DPS_OK when <ref refid="group__keystore_1ga15d6a9b8256b67c2ec8b1d365a98dbab" kindref="member">DPS_SetKey()</ref> succeeds</para></listitem><listitem><para>DPS_ERR_MISSING when no key is located</para></listitem><listitem><para>error otherwise </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/01org/dps-for-iot/inc/dps/dps.h" line="248" column="1" bodyfile="/home/tmalsbar/src/github.com/01org/dps-for-iot/inc/dps/dps.h" bodystart="248" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__keystore_1ga0acd005f34bca4fcbe1c460e2305ddae" prot="public" static="no">
        <type><ref refid="group__status_1ga30395a84d3cad9d4ec29848106415038" kindref="member">DPS_Status</ref>(*</type>
        <definition>typedef DPS_Status(* DPS_CAHandler) (DPS_KeyStoreRequest *request)</definition>
        <argsstring>)(DPS_KeyStoreRequest *request)</argsstring>
        <name>DPS_CAHandler</name>
        <briefdescription>
<para>Function prototype for a key store handler called when the trusted CA chain is requested. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="group__keystore_1ga37595f3207e42c52f7006659399135b2" kindref="member">DPS_SetCA()</ref> should be called to provide the CA chain to the caller.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>request</parametername>
</parameternamelist>
<parameterdescription>
<para>The request, only valid with the body of this callback function.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><itemizedlist>
<listitem><para>DPS_OK when <ref refid="group__keystore_1ga37595f3207e42c52f7006659399135b2" kindref="member">DPS_SetCA()</ref> succeeds</para></listitem><listitem><para>DPS_ERR_MISSING when no CA chain is configured</para></listitem><listitem><para>error otherwise </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/01org/dps-for-iot/inc/dps/dps.h" line="264" column="1" bodyfile="/home/tmalsbar/src/github.com/01org/dps-for-iot/inc/dps/dps.h" bodystart="264" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="group__keystore_1ga289b1c74c01c9988f04297aa082986de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__status_1ga30395a84d3cad9d4ec29848106415038" kindref="member">DPS_Status</ref></type>
        <definition>DPS_Status DPS_SetKeyAndId</definition>
        <argsstring>(DPS_KeyStoreRequest *request, const DPS_Key *key, const DPS_KeyId *keyId)</argsstring>
        <name>DPS_SetKeyAndId</name>
        <param>
          <type><ref refid="group__keystore_1ga7c3e50965b65334e9791780fa855ed16" kindref="member">DPS_KeyStoreRequest</ref> *</type>
          <declname>request</declname>
        </param>
        <param>
          <type>const <ref refid="group__keystore_1gaa56a1429b6a1658e674eea558bdbbfc0" kindref="member">DPS_Key</ref> *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const <ref refid="group__keystore_1ga4345e29dd2ad5d7fd88a1e988787bd72" kindref="member">DPS_KeyId</ref> *</type>
          <declname>keyId</declname>
        </param>
        <briefdescription>
<para>Provide a key and key identifier to a key store request. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>request</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput>request</computeroutput> parameter of the handler </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The key </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>keyId</parametername>
</parameternamelist>
<parameterdescription>
<para>The identifier of the key to provide</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DPS_OK or an error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/01org/dps-for-iot/inc/dps/dps.h" line="275" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__keystore_1ga15d6a9b8256b67c2ec8b1d365a98dbab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__status_1ga30395a84d3cad9d4ec29848106415038" kindref="member">DPS_Status</ref></type>
        <definition>DPS_Status DPS_SetKey</definition>
        <argsstring>(DPS_KeyStoreRequest *request, const DPS_Key *key)</argsstring>
        <name>DPS_SetKey</name>
        <param>
          <type><ref refid="group__keystore_1ga7c3e50965b65334e9791780fa855ed16" kindref="member">DPS_KeyStoreRequest</ref> *</type>
          <declname>request</declname>
        </param>
        <param>
          <type>const <ref refid="group__keystore_1gaa56a1429b6a1658e674eea558bdbbfc0" kindref="member">DPS_Key</ref> *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Provide a key to a key store request. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>request</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput>request</computeroutput> parameter of the handler </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The key</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DPS_OK or an error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/01org/dps-for-iot/inc/dps/dps.h" line="285" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__keystore_1ga37595f3207e42c52f7006659399135b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__status_1ga30395a84d3cad9d4ec29848106415038" kindref="member">DPS_Status</ref></type>
        <definition>DPS_Status DPS_SetCA</definition>
        <argsstring>(DPS_KeyStoreRequest *request, const char *ca)</argsstring>
        <name>DPS_SetCA</name>
        <param>
          <type><ref refid="group__keystore_1ga7c3e50965b65334e9791780fa855ed16" kindref="member">DPS_KeyStoreRequest</ref> *</type>
          <declname>request</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>ca</declname>
        </param>
        <briefdescription>
<para>Provide a trusted CA chain to a key store request. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>request</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput>request</computeroutput> parameter of the handler </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ca</parametername>
</parameternamelist>
<parameterdescription>
<para>The CA chain in PEM format</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DPS_OK or an error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/01org/dps-for-iot/inc/dps/dps.h" line="295" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__keystore_1ga088b3dc5eff10ab334d1e2aa0a329c26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__keystore_1gaf3833cfe48f848f698514bc5daa075fa" kindref="member">DPS_KeyStore</ref> *</type>
        <definition>DPS_KeyStore* DPS_KeyStoreHandle</definition>
        <argsstring>(DPS_KeyStoreRequest *request)</argsstring>
        <name>DPS_KeyStoreHandle</name>
        <param>
          <type><ref refid="group__keystore_1ga7c3e50965b65334e9791780fa855ed16" kindref="member">DPS_KeyStoreRequest</ref> *</type>
          <declname>request</declname>
        </param>
        <briefdescription>
<para>Returns the <computeroutput>DPS_KeyStore*</computeroutput> of a key store request. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>request</parametername>
</parameternamelist>
<parameterdescription>
<para>A key store request</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The DPS_KeyStore* or NULL </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/01org/dps-for-iot/inc/dps/dps.h" line="304" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__keystore_1gafa79de23848ff56d0cced67897313369" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__keystore_1gaf3833cfe48f848f698514bc5daa075fa" kindref="member">DPS_KeyStore</ref> *</type>
        <definition>DPS_KeyStore* DPS_CreateKeyStore</definition>
        <argsstring>(DPS_KeyAndIdHandler keyAndIdHandler, DPS_KeyHandler keyHandler, DPS_EphemeralKeyHandler ephemeralKeyHandler, DPS_CAHandler caHandler)</argsstring>
        <name>DPS_CreateKeyStore</name>
        <param>
          <type><ref refid="group__keystore_1ga83d3ade4f4acd7d4385d606270ddfd29" kindref="member">DPS_KeyAndIdHandler</ref></type>
          <declname>keyAndIdHandler</declname>
        </param>
        <param>
          <type><ref refid="group__keystore_1gaccf7e3d43bc1e586132d7f1ae03d02f7" kindref="member">DPS_KeyHandler</ref></type>
          <declname>keyHandler</declname>
        </param>
        <param>
          <type><ref refid="group__keystore_1ga5b4cf102912eea802196d3e307c399ef" kindref="member">DPS_EphemeralKeyHandler</ref></type>
          <declname>ephemeralKeyHandler</declname>
        </param>
        <param>
          <type><ref refid="group__keystore_1ga0acd005f34bca4fcbe1c460e2305ddae" kindref="member">DPS_CAHandler</ref></type>
          <declname>caHandler</declname>
        </param>
        <briefdescription>
<para>Creates a key store. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>keyAndIdHandler</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional handler for receiving key and key identifier requests </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>keyHandler</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional handler for receiving key requests </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ephemeralKeyHandler</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional handler for receiving ephemeral key requests </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>caHandler</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional handler for receiving CA chain requests</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The key store or NULL if there were no resources. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/01org/dps-for-iot/inc/dps/dps.h" line="318" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__keystore_1ga40bea030ef0ba65ec332880ae2bbfee1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DPS_DestroyKeyStore</definition>
        <argsstring>(DPS_KeyStore *keyStore)</argsstring>
        <name>DPS_DestroyKeyStore</name>
        <param>
          <type><ref refid="group__keystore_1gaf3833cfe48f848f698514bc5daa075fa" kindref="member">DPS_KeyStore</ref> *</type>
          <declname>keyStore</declname>
        </param>
        <briefdescription>
<para>Destroys a previously created key store. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>keyStore</parametername>
</parameternamelist>
<parameterdescription>
<para>The key store </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/01org/dps-for-iot/inc/dps/dps.h" line="326" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__keystore_1gaf8062875af6cab5caabc3f13bf995807" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__status_1ga30395a84d3cad9d4ec29848106415038" kindref="member">DPS_Status</ref></type>
        <definition>DPS_Status DPS_SetKeyStoreData</definition>
        <argsstring>(DPS_KeyStore *keyStore, void *data)</argsstring>
        <name>DPS_SetKeyStoreData</name>
        <param>
          <type><ref refid="group__keystore_1gaf3833cfe48f848f698514bc5daa075fa" kindref="member">DPS_KeyStore</ref> *</type>
          <declname>keyStore</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Store a pointer to application data in a key store. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>keyStore</parametername>
</parameternamelist>
<parameterdescription>
<para>The key store </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The data pointer to store</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DPS_OK or an error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/01org/dps-for-iot/inc/dps/dps.h" line="336" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__keystore_1ga3b67d7dde74267ee9342dc3efd33812b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* DPS_GetKeyStoreData</definition>
        <argsstring>(const DPS_KeyStore *keyStore)</argsstring>
        <name>DPS_GetKeyStoreData</name>
        <param>
          <type>const <ref refid="group__keystore_1gaf3833cfe48f848f698514bc5daa075fa" kindref="member">DPS_KeyStore</ref> *</type>
          <declname>keyStore</declname>
        </param>
        <briefdescription>
<para>Get application data pointer previously set by <ref refid="group__keystore_1gaf8062875af6cab5caabc3f13bf995807" kindref="member">DPS_SetKeyStoreData()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>keyStore</parametername>
</parameternamelist>
<parameterdescription>
<para>The keyStore</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the data or NULL if the key store is invalid </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/01org/dps-for-iot/inc/dps/dps.h" line="345" column="1"/>
      </memberdef>
      <memberdef kind="define" id="group__keystore_1ga02d2171bf3c24345e5f562cb3e181a57" prot="public" static="no">
        <name>DPS_AES_256_KEY_LEN</name>
        <initializer>32</initializer>
        <briefdescription>
<para>AES 256 key length, in bytes. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/01org/dps-for-iot/inc/dps/dps.h" line="130" column="9" bodyfile="/home/tmalsbar/src/github.com/01org/dps-for-iot/inc/dps/dps.h" bodystart="130" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>In-memory Key Store</header>
      <description><para>The implementation of an in-memory key store. </para></description>
      <memberdef kind="typedef" id="group__keystore_1ga57f11410b3ef6a686594b60836dc8c99" prot="public" static="no">
        <type>struct _DPS_MemoryKeyStore</type>
        <definition>typedef struct _DPS_MemoryKeyStore DPS_MemoryKeyStore</definition>
        <argsstring></argsstring>
        <name>DPS_MemoryKeyStore</name>
        <briefdescription>
<para>Opaque type for an in-memory key store. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/01org/dps-for-iot/inc/dps/dps.h" line="345" column="1" bodyfile="/home/tmalsbar/src/github.com/01org/dps-for-iot/inc/dps/dps.h" bodystart="358" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="group__keystore_1ga2da4c5f9b7ab5ff6b65d1c8f4d6c30bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__keystore_1ga57f11410b3ef6a686594b60836dc8c99" kindref="member">DPS_MemoryKeyStore</ref> *</type>
        <definition>DPS_MemoryKeyStore* DPS_CreateMemoryKeyStore</definition>
        <argsstring>()</argsstring>
        <name>DPS_CreateMemoryKeyStore</name>
        <briefdescription>
<para>Creates an in-memory key store. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The key store or NULL if there were no resources. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/01org/dps-for-iot/inc/dps/dps.h" line="365" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__keystore_1ga2f9f4aeff872ca74d5735a8727f4dbae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DPS_DestroyMemoryKeyStore</definition>
        <argsstring>(DPS_MemoryKeyStore *keyStore)</argsstring>
        <name>DPS_DestroyMemoryKeyStore</name>
        <param>
          <type><ref refid="group__keystore_1ga57f11410b3ef6a686594b60836dc8c99" kindref="member">DPS_MemoryKeyStore</ref> *</type>
          <declname>keyStore</declname>
        </param>
        <briefdescription>
<para>Destroys a previously created in-memory key store. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>keyStore</parametername>
</parameternamelist>
<parameterdescription>
<para>An in-memory key store </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/01org/dps-for-iot/inc/dps/dps.h" line="372" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__keystore_1ga1855a8efae53b90fa95aa5b97295c4ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__status_1ga30395a84d3cad9d4ec29848106415038" kindref="member">DPS_Status</ref></type>
        <definition>DPS_Status DPS_SetContentKey</definition>
        <argsstring>(DPS_MemoryKeyStore *keyStore, const DPS_KeyId *keyId, const DPS_Key *key)</argsstring>
        <name>DPS_SetContentKey</name>
        <param>
          <type><ref refid="group__keystore_1ga57f11410b3ef6a686594b60836dc8c99" kindref="member">DPS_MemoryKeyStore</ref> *</type>
          <declname>keyStore</declname>
        </param>
        <param>
          <type>const <ref refid="group__keystore_1ga4345e29dd2ad5d7fd88a1e988787bd72" kindref="member">DPS_KeyId</ref> *</type>
          <declname>keyId</declname>
        </param>
        <param>
          <type>const <ref refid="group__keystore_1gaa56a1429b6a1658e674eea558bdbbfc0" kindref="member">DPS_Key</ref> *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Create or replace a key with the specified key identifier in the key store. </para>        </briefdescription>
        <detaileddescription>
<para>Specify a previously set key identifier and a NULL key to remove a key from the key store.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>keyStore</parametername>
</parameternamelist>
<parameterdescription>
<para>An in-memory key store </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>keyId</parametername>
</parameternamelist>
<parameterdescription>
<para>The identifier of the key to create, replace, or remove </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The key</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DPS_OK or an error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/01org/dps-for-iot/inc/dps/dps.h" line="385" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__keystore_1ga8664b8c5cc2d3df6512ecb71e7f92212" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__status_1ga30395a84d3cad9d4ec29848106415038" kindref="member">DPS_Status</ref></type>
        <definition>DPS_Status DPS_SetNetworkKey</definition>
        <argsstring>(DPS_MemoryKeyStore *keyStore, const DPS_KeyId *keyId, const DPS_Key *key)</argsstring>
        <name>DPS_SetNetworkKey</name>
        <param>
          <type><ref refid="group__keystore_1ga57f11410b3ef6a686594b60836dc8c99" kindref="member">DPS_MemoryKeyStore</ref> *</type>
          <declname>keyStore</declname>
        </param>
        <param>
          <type>const <ref refid="group__keystore_1ga4345e29dd2ad5d7fd88a1e988787bd72" kindref="member">DPS_KeyId</ref> *</type>
          <declname>keyId</declname>
        </param>
        <param>
          <type>const <ref refid="group__keystore_1gaa56a1429b6a1658e674eea558bdbbfc0" kindref="member">DPS_Key</ref> *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Create or replace the network key in the key store. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>keyStore</parametername>
</parameternamelist>
<parameterdescription>
<para>An in-memory key store </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>keyId</parametername>
</parameternamelist>
<parameterdescription>
<para>The identifier of the key to create </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The key</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DPS_OK or an error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/01org/dps-for-iot/inc/dps/dps.h" line="396" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__keystore_1ga8d55f887ebbd6b0af80caa43bf77a088" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__status_1ga30395a84d3cad9d4ec29848106415038" kindref="member">DPS_Status</ref></type>
        <definition>DPS_Status DPS_SetTrustedCA</definition>
        <argsstring>(DPS_MemoryKeyStore *mks, const char *ca)</argsstring>
        <name>DPS_SetTrustedCA</name>
        <param>
          <type><ref refid="group__keystore_1ga57f11410b3ef6a686594b60836dc8c99" kindref="member">DPS_MemoryKeyStore</ref> *</type>
          <declname>mks</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>ca</declname>
        </param>
        <briefdescription>
<para>Create or replace the trusted CA(s) in the key store. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mks</parametername>
</parameternamelist>
<parameterdescription>
<para>An in-memory key store </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ca</parametername>
</parameternamelist>
<parameterdescription>
<para>The CA chain in PEM format</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DPS_OK or an error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/01org/dps-for-iot/inc/dps/dps.h" line="406" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__keystore_1ga7a8c6874dd5bff0a6391a5515b545e17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__status_1ga30395a84d3cad9d4ec29848106415038" kindref="member">DPS_Status</ref></type>
        <definition>DPS_Status DPS_SetCertificate</definition>
        <argsstring>(DPS_MemoryKeyStore *mks, const char *cert, const char *key, const char *password)</argsstring>
        <name>DPS_SetCertificate</name>
        <param>
          <type><ref refid="group__keystore_1ga57f11410b3ef6a686594b60836dc8c99" kindref="member">DPS_MemoryKeyStore</ref> *</type>
          <declname>mks</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>cert</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>password</declname>
        </param>
        <briefdescription>
<para>Create or replace a certificate in the key store. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mks</parametername>
</parameternamelist>
<parameterdescription>
<para>An in-memory key store </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cert</parametername>
</parameternamelist>
<parameterdescription>
<para>The certificate in PEM format </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The optional private key in PEM format </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>password</parametername>
</parameternamelist>
<parameterdescription>
<para>The optional password protecting the key, may be NULL</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DPS_OK or an error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/01org/dps-for-iot/inc/dps/dps.h" line="419" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__keystore_1ga2811c4ffff51bd75a72dd0a9c8796616" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__keystore_1gaf3833cfe48f848f698514bc5daa075fa" kindref="member">DPS_KeyStore</ref> *</type>
        <definition>DPS_KeyStore* DPS_MemoryKeyStoreHandle</definition>
        <argsstring>(DPS_MemoryKeyStore *keyStore)</argsstring>
        <name>DPS_MemoryKeyStoreHandle</name>
        <param>
          <type><ref refid="group__keystore_1ga57f11410b3ef6a686594b60836dc8c99" kindref="member">DPS_MemoryKeyStore</ref> *</type>
          <declname>keyStore</declname>
        </param>
        <briefdescription>
<para>Returns the <computeroutput>DPS_KeyStore*</computeroutput> of an in-memory key store. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>keyStore</parametername>
</parameternamelist>
<parameterdescription>
<para>An in-memory key store</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The DPS_KeyStore* or NULL </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tmalsbar/src/github.com/01org/dps-for-iot/inc/dps/dps.h" line="429" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Key stores provide key data for protecting messages and the network. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
