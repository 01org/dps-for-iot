<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="tutorials-link" kind="page">
    <compoundname>tutorials-link</compoundname>
    <title>Building a DPS network</title>
    <detaileddescription>
<para>The <ref refid="tutorials-hello-world" kindref="compound">Hello world</ref> tutorial showed how to build a simple multicast publisher and subscriber network. This tutorial will show how to use the link functionality of DPS to create more complex networks that can span subnets.</para><para>As before, we need to create nodes for the publisher and subscriber using <ref refid="tutorials-hello-world_1creating-a-node" kindref="member">DPS_CreateNode() </ref>. But this time we will create a third type of node that is neither a publisher or subscriber that will forward publications and subscriptions between the publisher and subscriber nodes.</para><sect1 id="tutorials-link_1starting-a-unicast-node">
<title>Starting a node</title>
<para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mcastPub<sp/>=<sp/><ref refid="group__node_1gac939c83361ed89086f37c78d9c9009dd" kindref="member">DPS_MCAST_PUB_DISABLED</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>listenPort<sp/>=<sp/>port;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__status_1ga30395a84d3cad9d4ec29848106415038" kindref="member">DPS_Status</ref><sp/>ret<sp/>=<sp/><ref refid="group__node_1ga160d504bfaeb0d3711e0259000340fe3" kindref="member">DPS_StartNode</ref>(node,<sp/>mcastPub,<sp/>listenPort);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>!=<sp/><ref refid="group__status_1ga0ea3dd37bc558859ae0cb5a4f79a4bdd" kindref="member">DPS_OK</ref>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>Exit;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>portNum<sp/>=<sp/><ref refid="group__node_1gaf920b28fe0721a7f97b11673494d7b36" kindref="member">DPS_GetPortNumber</ref>(node);</highlight></codeline>
</programlisting> The first thing we will do is disable multicast sending and receiving for our three nodes by using <ref refid="group__node_1gac939c83361ed89086f37c78d9c9009dd" kindref="member">DPS_MCAST_PUB_DISABLED</ref> for the <computeroutput>mcastPub</computeroutput> parameter of <ref refid="group__node_1ga160d504bfaeb0d3711e0259000340fe3" kindref="member">DPS_StartNode()</ref>. All publications and subscriptions will go through the forwarding node.</para><para>The second thing we do is specify the <computeroutput>listenPort</computeroutput> parameter to <ref refid="group__node_1ga160d504bfaeb0d3711e0259000340fe3" kindref="member">DPS_StartNode()</ref>. A value of zero lets DPS assign an ephemeral listening port. A value of non-zero requests a specific port.</para><para>The last thing we do is get the ephemeral port DPS has chosen with <ref refid="group__node_1gaf920b28fe0721a7f97b11673494d7b36" kindref="member">DPS_GetPortNumber()</ref>. This will be used by the subscriber and publisher to link to the forwarding node.</para></sect1>
<sect1 id="tutorials-link_1linking">
<title>Linking to a node</title>
<para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nodeaddress_1ga9e9f56aa38e82b4edcef7eb81e9f5bd2" kindref="member">DPS_NodeAddress</ref>*<sp/>addr<sp/>=<sp/><ref refid="group__nodeaddress_1ga6bed18a4b0ad533ec88c7a0d376de818" kindref="member">DPS_CreateAddress</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!addr)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>Exit;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sockaddr_in<sp/>saddr;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(&amp;saddr,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(saddr));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>saddr.sin_family<sp/>=<sp/>AF_INET;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>saddr.sin_port<sp/>=<sp/>htons(linkPort);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>saddr.sin_addr.s_addr<sp/>=<sp/>htonl(INADDR_LOOPBACK);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nodeaddress_1ga6231c243c483bd2d282f7df734a98946" kindref="member">DPS_SetAddress</ref>(addr,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>sockaddr*)&amp;saddr);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/><ref refid="group__node_1ga5064c63b8ce76bf34402e0c80183234b" kindref="member">DPS_Link</ref>(node,<sp/>addr,<sp/>LinkComplete,<sp/>NULL);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nodeaddress_1ga1f373831e8009ff5959ccb02b8c3fb14" kindref="member">DPS_DestroyAddress</ref>(addr);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>!=<sp/><ref refid="group__status_1ga0ea3dd37bc558859ae0cb5a4f79a4bdd" kindref="member">DPS_OK</ref>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>Exit;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
</programlisting> Now that we know the host (<computeroutput>localhost</computeroutput> in this example) and listening port of the forwarding node, we can call <ref refid="group__node_1ga5064c63b8ce76bf34402e0c80183234b" kindref="member">DPS_Link()</ref> to create the link from the subscriber and publisher to the forwarding node. In order to do this we must first create a <ref refid="group__nodeaddress_1ga9e9f56aa38e82b4edcef7eb81e9f5bd2" kindref="member">DPS_NodeAddress</ref> and set its value to the host and port of the forwarding node.</para><para>Once we call <ref refid="group__node_1ga5064c63b8ce76bf34402e0c80183234b" kindref="member">DPS_Link()</ref> we can destroy the <ref refid="group__nodeaddress_1ga9e9f56aa38e82b4edcef7eb81e9f5bd2" kindref="member">DPS_NodeAddress</ref> as we don&apos;t need it anymore while we wait for the asynchronous link to complete.</para><para><programlisting><codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LinkComplete(<ref refid="group__node_1ga4dd612ab965134321bb57fdb065f121c" kindref="member">DPS_Node</ref>*<sp/>node,<sp/><ref refid="group__nodeaddress_1ga9e9f56aa38e82b4edcef7eb81e9f5bd2" kindref="member">DPS_NodeAddress</ref>*<sp/>addr,<sp/><ref refid="group__status_1ga30395a84d3cad9d4ec29848106415038" kindref="member">DPS_Status</ref><sp/>status,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>data)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__debug_1gaf1d25cc7f1d2d92f96ba620217af28fd" kindref="member">DPS_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Node<sp/>is<sp/>linked<sp/>to<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__nodeaddress_1gafc7b21048f92370ca29325d6245b576d" kindref="member">DPS_NodeAddrToString</ref>(addr));</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> The link is now complete and we can proceed with <ref refid="tutorials-hello-world_1receiving-a-publication" kindref="member">subscribing </ref> or <ref refid="tutorials-hello-world_1sending-a-publication" kindref="member">publishing </ref> as before.</para><para><simplesect kind="note"><para>The link complete callback is dispatched from the <computeroutput>DPS_Node&apos;s</computeroutput> thread.</para></simplesect>
<simplesect kind="see"><para><ref refid="group__node_1ga79c86c3c0c5d6438b953a9acaab0ab0b" kindref="member">DPS_Unlink()</ref>, <ref refid="group__node_1ga0bd13b2bd395bbc7807ecc899a8862f1" kindref="member">DPS_LinkTo()</ref>, <ref refid="group__node_1ga2d5bb0528c2a171991ad6355cbadac69" kindref="member">DPS_UnlinkFrom()</ref> </para></simplesect>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
