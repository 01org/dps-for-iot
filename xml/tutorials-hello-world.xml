<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="tutorials-hello-world" kind="page">
    <compoundname>tutorials-hello-world</compoundname>
    <title>Hello world</title>
    <detaileddescription>
<sect1 id="tutorials-hello-world_1hello-world-prerequisites">
<title>Prerequisites</title>
<para><programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;<ref refid="dbg_8h" kindref="compound">dps/dbg.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="dps_8h" kindref="compound">dps/dps.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
</programlisting> The first step in creating a DPS application is to include the necessary header files.</para></sect1>
<sect1 id="tutorials-hello-world_1creating-a-node">
<title>Creating a node</title>
<para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*separators<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;/.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__keystore_1gaf3833cfe48f848f698514bc5daa075fa" kindref="member">DPS_KeyStore</ref>*<sp/>keyStore<sp/>=<sp/>NULL;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct___d_p_s___key_id" kindref="compound">DPS_KeyId</ref>*<sp/>keyId<sp/>=<sp/>NULL;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__node_1ga4dd612ab965134321bb57fdb065f121c" kindref="member">DPS_Node</ref>*<sp/>node<sp/>=<sp/><ref refid="group__node_1gaf6641b5bbf27b2c45ac7f926b0ce4efe" kindref="member">DPS_CreateNode</ref>(separators,<sp/>keyStore,<sp/>keyId);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!node)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>Exit;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
</programlisting> Each entity in DPS is represented by a <computeroutput>DPS_Node</computeroutput>. The node may be a publisher, subscriber, both, or neither. For this example, we&apos;re going to be creating publisher and subscriber nodes.</para><para>Creating a node requires three parameters: the topic separators, a key store, and a key identifier. For now we&apos;re only concerned with the separators. Key stores and identifiers are covered later when discussing how to secure communications.</para><para>The separators parameter is a string containing the characters used as topic level separators. Providing <computeroutput>/</computeroutput>. as the separators parameter value allows both <computeroutput>/</computeroutput> and <computeroutput></computeroutput>. as separators.</para><para><simplesect kind="see"><para><ref refid="group__node_1gad19cf4272ba11e935654175c83db2ce1" kindref="member">DPS_SetNodeData()</ref>, <ref refid="group__node_1ga65bba7bcfe5e940b153fcced4e2e8880" kindref="member">DPS_GetNodeData()</ref></para></simplesect>
</para></sect1>
<sect1 id="tutorials-hello-world_1starting-a-node">
<title>Starting a node</title>
<para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mcastPub<sp/>=<sp/><ref refid="group__node_1ga178a3a6450eeff450820fa34fd82049c" kindref="member">DPS_MCAST_PUB_ENABLE_SEND</ref><sp/>|<sp/><ref refid="group__node_1gae493573fb2e02b87258952223eb4fcd7" kindref="member">DPS_MCAST_PUB_ENABLE_RECV</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>listenPort<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__status_1ga30395a84d3cad9d4ec29848106415038" kindref="member">DPS_Status</ref><sp/>ret<sp/>=<sp/><ref refid="group__node_1ga160d504bfaeb0d3711e0259000340fe3" kindref="member">DPS_StartNode</ref>(node,<sp/>mcastPub,<sp/>listenPort);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>!=<sp/><ref refid="group__status_1ga0ea3dd37bc558859ae0cb5a4f79a4bdd" kindref="member">DPS_OK</ref>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>Exit;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
</programlisting> Once created, a node must be started. Starting a node enables it to begin sending and receiving DPS messages in the network.</para><para>For this example, we are going to be sending and receiving multicast publications so we enable both and let DPS assign the listening port.</para><para><simplesect kind="see"><para><ref refid="group__node_1gac939c83361ed89086f37c78d9c9009dd" kindref="member">DPS_MCAST_PUB_DISABLED</ref>, <ref refid="group__node_1gaf920b28fe0721a7f97b11673494d7b36" kindref="member">DPS_GetPortNumber()</ref></para></simplesect>
</para></sect1>
<sect1 id="tutorials-hello-world_1publishing">
<title>Publishing</title>
<sect2 id="tutorials-hello-world_1creating-a-publication">
<title>Creating a publication</title>
<para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__publication_1ga0d439693474aa54e27f3d45a054696ac" kindref="member">DPS_Publication</ref>*<sp/>pub<sp/>=<sp/><ref refid="group__publication_1gaca070a96a6374e99a05d647c10737962" kindref="member">DPS_CreatePublication</ref>(node);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pub)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>Exit;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>topics[]<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;a/b/c/d&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>numTopics<sp/>=<sp/>A_SIZEOF(topics);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>noWildCard<sp/>=<sp/><ref refid="dps_8h_1ad8b397975a479b996ef223367d8835a9" kindref="member">DPS_FALSE</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/><ref refid="group__publication_1ga7b0709e28cb34d5a30b90e4142cd6c19" kindref="member">DPS_InitPublication</ref>(pub,<sp/>topics,<sp/>numTopics,<sp/>noWildCard,<sp/>NULL,<sp/>NULL);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>!=<sp/><ref refid="group__status_1ga0ea3dd37bc558859ae0cb5a4f79a4bdd" kindref="member">DPS_OK</ref>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>Exit;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
</programlisting> Each publication in DPS is represented by a <computeroutput>DPS_Publication</computeroutput>. Each publication has a set of topics, a UUID, and a sequence number. In this example we are creating a publication with one topic, <computeroutput>a/b/c/d</computeroutput>. The UUID is assigned by DPS and the sequence number will be incremented each time we publish.</para><para>The <computeroutput>noWildCard</computeroutput> parameter is used by the publisher to control whether a subscription is required to match the publication&apos;s topics exactly or can use wildcards to match the topics. If we set <computeroutput>noWildCard</computeroutput> to <computeroutput>DPS_TRUE</computeroutput> then only a subscription to <computeroutput>a/b/c/d</computeroutput> will receive this publication. This allows the publisher to prevent publications being sent to catchall subscriptions such as <computeroutput>+/#</computeroutput>. Since we set <computeroutput>noWildCard</computeroutput> to <computeroutput>DPS_FALSE</computeroutput> here, subscriptions to <computeroutput>a/#</computeroutput>, <computeroutput>a/+/+/d</computeroutput>, or similar variations will receive this publication.</para><para>Both the publication&apos;s key identifier and acknowledgement handler are set to <computeroutput>NULL</computeroutput> here; they are covered in later sections.</para><para><simplesect kind="see"><para><ref refid="group__publication_1ga91c46ccb6df7f4bb99ca5d9d35cc5a4a" kindref="member">DPS_SetPublicationData()</ref>, <ref refid="group__publication_1gaa8bee35089ac62289c9ba0e6a0568ca0" kindref="member">DPS_GetPublicationData()</ref>, <ref refid="group__publication_1gad2a37d52f12c93434b431eefd732f363" kindref="member">DPS_PublicationGetNode()</ref>, <ref refid="group__publication_1gaba1ad3ee807b75a1281d334be06a12f7" kindref="member">DPS_PublicationGetUUID()</ref>, <ref refid="group__publication_1ga875b48217d861d4a9fa5471419d354e9" kindref="member">DPS_PublicationGetSequenceNum()</ref></para></simplesect>
</para></sect2>
<sect2 id="tutorials-hello-world_1sending-a-publication">
<title>Sending a publication</title>
<para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>payload<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>numPayloadBytes<sp/>=<sp/>strlen(payload)<sp/>+<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int16_t<sp/>ttl<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/><ref refid="group__publication_1ga828a4efc5c235c48a81f6460cc3fe416" kindref="member">DPS_Publish</ref>(pub,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*)payload,<sp/>numPayloadBytes,<sp/>ttl);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>!=<sp/><ref refid="group__status_1ga0ea3dd37bc558859ae0cb5a4f79a4bdd" kindref="member">DPS_OK</ref>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>Exit;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
</programlisting> Once created and initialized with a set of topics, application payloads may be sent. Payload data is simply an array of bytes in DPS, no assumptions are made with regards to the payload format.</para><para>In this example the <computeroutput>ttl</computeroutput> parameter is zero, indicating that the publication will be sent best-effort to all active subscribing nodes. A non-zero ttl is referred to as a retained publication and is covered later.</para><para>A publisher may send additional publications via the same <computeroutput>DPS_Publication</computeroutput>. Each additional send increments the sequence number of the publication.</para></sect2>
</sect1>
<sect1 id="tutorials-hello-world_1subscribing">
<title>Subscribing</title>
<sect2 id="tutorials-hello-world_1creating-a-subscription">
<title>Creating a subscription</title>
<para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>topics[]<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;a/b/c/d&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>numTopics<sp/>=<sp/>A_SIZEOF(topics);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__subscription_1gadb927c4c1b7306867a75fc4288b54af7" kindref="member">DPS_Subscription</ref>*<sp/>sub<sp/>=<sp/><ref refid="group__subscription_1ga4095bb00bd0ca7fa9614ebbc2c28199f" kindref="member">DPS_CreateSubscription</ref>(node,<sp/>topics,<sp/>numTopics);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!sub)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>Exit;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
</programlisting> Each subscription in DPS is represented by a <computeroutput>DPS_Subscription</computeroutput>. In this example we are creating a subscription with one topic with no wildcards, <computeroutput>a/b/c/d</computeroutput>.</para><para>Wildcards may be used to match a broader set of topics. A <computeroutput>+</computeroutput> matches any single topic level, and a <computeroutput>#</computeroutput> matches all topic levels from that level on. In this instance since the publisher is allowing wildcard matching, the subscriber could use either <computeroutput>a/b/+/d</computeroutput> or <computeroutput>a/#</computeroutput> (among others) as the topic and still receive the publication.</para><para>A subscription may also be created with multiple topics. The publication must include <emphasis>all</emphasis> of the topics to be received.</para><para><simplesect kind="see"><para><ref refid="group__subscription_1gad581d341003e20c714061e44b57c2009" kindref="member">DPS_SetSubscriptionData()</ref>, <ref refid="group__subscription_1ga88ab2284734f099ef67bcc60997142b3" kindref="member">DPS_GetSubscriptionData()</ref>, <ref refid="group__subscription_1gafea65751c811555736c8c65fcb3a9480" kindref="member">DPS_SubscriptionGetNode()</ref></para></simplesect>
</para></sect2>
<sect2 id="tutorials-hello-world_1receiving-a-publication">
<title>Receiving a publication</title>
<para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/><ref refid="group__subscription_1ga83234ea82a91e07e3f5894a4dcf5267e" kindref="member">DPS_Subscribe</ref>(sub,<sp/>PublicationHandler);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>!=<sp/><ref refid="group__status_1ga0ea3dd37bc558859ae0cb5a4f79a4bdd" kindref="member">DPS_OK</ref>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>Exit;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
</programlisting> Publications are received asynchronously. The first step in receiving a publication is to provide the publication handler to DPS and start the subscription. The publication handler will be called for each received publication.</para><para><simplesect kind="note"><para>Each instance of <computeroutput>DPS_Node</computeroutput> creates and runs its own thread. The lifetime of this thread is the same as the lifetime of the node. The publication handler is dispatched from this thread.</para></simplesect>
<programlisting><codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PublicationHandler(<ref refid="group__subscription_1gadb927c4c1b7306867a75fc4288b54af7" kindref="member">DPS_Subscription</ref>*<sp/>sub,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__publication_1ga0d439693474aa54e27f3d45a054696ac" kindref="member">DPS_Publication</ref>*<sp/>pub,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t*<sp/>payload,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>numPayloadBytes)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="group__subscription_1gab0ad2c6806f8f44f27c70fff915b7e9a" kindref="member">DPS_SubscriptionGetNumTopics</ref>(sub);<sp/>++i)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>topic<sp/>=<sp/><ref refid="group__subscription_1gaacc63deda2f2d97cf3f44ca84784b2f6" kindref="member">DPS_SubscriptionGetTopic</ref>(sub,<sp/>i);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__debug_1gaf1d25cc7f1d2d92f96ba620217af28fd" kindref="member">DPS_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;subscription<sp/>topic[%ld]=%s\n&quot;</highlight><highlight class="normal">,<sp/>i,<sp/>topic);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct___d_p_s___u_u_i_d" kindref="compound">DPS_UUID</ref>*<sp/>uuid<sp/>=<sp/><ref refid="group__publication_1gaba1ad3ee807b75a1281d334be06a12f7" kindref="member">DPS_PublicationGetUUID</ref>(pub);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__debug_1gaf1d25cc7f1d2d92f96ba620217af28fd" kindref="member">DPS_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;uuid=%s\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__uuid_1ga9c51faa57ecb228ce7eda077a90b20ff" kindref="member">DPS_UUIDToString</ref>(uuid));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>n<sp/>=<sp/><ref refid="group__publication_1ga875b48217d861d4a9fa5471419d354e9" kindref="member">DPS_PublicationGetSequenceNum</ref>(pub);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__debug_1gaf1d25cc7f1d2d92f96ba620217af28fd" kindref="member">DPS_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;sequence<sp/>number=%d\n&quot;</highlight><highlight class="normal">,<sp/>n);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="group__publication_1gaee6fc3b13484faacff0d26646778f777" kindref="member">DPS_PublicationGetNumTopics</ref>(pub);<sp/>++i)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>topic<sp/>=<sp/><ref refid="group__publication_1ga143a5c6fbe0bdf1725e841f122582432" kindref="member">DPS_PublicationGetTopic</ref>(pub,<sp/>i);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__debug_1gaf1d25cc7f1d2d92f96ba620217af28fd" kindref="member">DPS_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;publication<sp/>topic[%ld]=%s\n&quot;</highlight><highlight class="normal">,<sp/>i,<sp/>topic);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__debug_1gaf1d25cc7f1d2d92f96ba620217af28fd" kindref="member">DPS_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;payload=%.*s\n&quot;</highlight><highlight class="normal">,<sp/>numPayloadBytes,<sp/>payload);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> This publication handler exercises the APIs for retrieving the subscription and publication information.</para></sect2>
</sect1>
<sect1 id="tutorials-hello-world_1acknowledging">
<title>Acknowledging</title>
<para>Acknowledgements provide an optional means for subscribers to reply to publications. For example, they may be used when the publication is logically a request and the acknowledgements are responses. Similar to publications, acknowledgements may include an application payload, and no assumptions are made by DPS with regards to the acknowledgement payload format.</para><sect2 id="tutorials-hello-world_1requesting-an-acknowledgement">
<title>Requesting an acknowledgement</title>
<para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__publication_1ga0d439693474aa54e27f3d45a054696ac" kindref="member">DPS_Publication</ref>*<sp/>pub<sp/>=<sp/><ref refid="group__publication_1gaca070a96a6374e99a05d647c10737962" kindref="member">DPS_CreatePublication</ref>(node);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pub)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>Exit;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>topics[]<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;a/b/c/d&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>numTopics<sp/>=<sp/>A_SIZEOF(topics);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>noWildCard<sp/>=<sp/><ref refid="dps_8h_1ad8b397975a479b996ef223367d8835a9" kindref="member">DPS_FALSE</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/><ref refid="group__publication_1ga7b0709e28cb34d5a30b90e4142cd6c19" kindref="member">DPS_InitPublication</ref>(pub,<sp/>topics,<sp/>numTopics,<sp/>noWildCard,<sp/>NULL,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AcknowledgementHandler);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>!=<sp/><ref refid="group__status_1ga0ea3dd37bc558859ae0cb5a4f79a4bdd" kindref="member">DPS_OK</ref>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>Exit;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
</programlisting> Requesting an acknowledgement is identical to <ref refid="tutorials-hello-world_1creating-a-publication" kindref="member">Creating a publication</ref>, with the addition of the <computeroutput>DPS_AcknowledgementHandler</computeroutput>.</para></sect2>
<sect2 id="tutorials-hello-world_1sending-an-acknowledgement">
<title>Sending an acknowledgement</title>
<para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__publication_1ga516f7f314c7b95210751d00285758b9b" kindref="member">DPS_PublicationIsAckRequested</ref>(pub))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>payload<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;World&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>numPayloadBytes<sp/>=<sp/>strlen(payload)<sp/>+<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__status_1ga30395a84d3cad9d4ec29848106415038" kindref="member">DPS_Status</ref><sp/>ret<sp/>=<sp/><ref refid="group__publication_1ga308074429a566ffb8d04d55bae520b04" kindref="member">DPS_AckPublication</ref>(pub,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*)payload,<sp/>numPayloadBytes);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>!=<sp/><ref refid="group__status_1ga0ea3dd37bc558859ae0cb5a4f79a4bdd" kindref="member">DPS_OK</ref>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>Exit;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
</programlisting> To determine if a publication has requested an ack, call <ref refid="group__publication_1ga516f7f314c7b95210751d00285758b9b" kindref="member">DPS_PublicationIsAckRequested()</ref>. To send an acknowledgement, along with any optional acknowledgement payload, call <ref refid="group__publication_1ga308074429a566ffb8d04d55bae520b04" kindref="member">DPS_AckPublication()</ref>.</para><para>The <computeroutput>pub</computeroutput> parameter of the publication handler is only valid during the body of the handler. In order to acknowledge a publication after the handler has returned, the application must first call <ref refid="group__publication_1ga41f31a8b63558e13d73d96de6086e5c4" kindref="member">DPS_CopyPublication()</ref> to create a partial copy of the publication. The copy may be used after the handler returns.</para></sect2>
<sect2 id="tutorials-hello-world_1receiving-an-acknowledgement">
<title>Receiving an acknowledgement</title>
<para><programlisting><codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AcknowledgementHandler(<ref refid="group__publication_1ga0d439693474aa54e27f3d45a054696ac" kindref="member">DPS_Publication</ref>*<sp/>pub,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t*<sp/>payload,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>numPayloadBytes)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct___d_p_s___u_u_i_d" kindref="compound">DPS_UUID</ref>*<sp/>uuid<sp/>=<sp/><ref refid="group__publication_1gaba1ad3ee807b75a1281d334be06a12f7" kindref="member">DPS_PublicationGetUUID</ref>(pub);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__debug_1gaf1d25cc7f1d2d92f96ba620217af28fd" kindref="member">DPS_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;uuid=%s\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__uuid_1ga9c51faa57ecb228ce7eda077a90b20ff" kindref="member">DPS_UUIDToString</ref>(uuid));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>n<sp/>=<sp/><ref refid="group__publication_1ga875b48217d861d4a9fa5471419d354e9" kindref="member">DPS_PublicationGetSequenceNum</ref>(pub);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__debug_1gaf1d25cc7f1d2d92f96ba620217af28fd" kindref="member">DPS_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;sequence<sp/>number=%d\n&quot;</highlight><highlight class="normal">,<sp/>n);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="group__publication_1gaee6fc3b13484faacff0d26646778f777" kindref="member">DPS_PublicationGetNumTopics</ref>(pub);<sp/>++i)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>topic<sp/>=<sp/><ref refid="group__publication_1ga143a5c6fbe0bdf1725e841f122582432" kindref="member">DPS_PublicationGetTopic</ref>(pub,<sp/>i);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__debug_1gaf1d25cc7f1d2d92f96ba620217af28fd" kindref="member">DPS_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;publication<sp/>topic[%ld]=%s\n&quot;</highlight><highlight class="normal">,<sp/>i,<sp/>topic);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__debug_1gaf1d25cc7f1d2d92f96ba620217af28fd" kindref="member">DPS_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;payload=%.*s\n&quot;</highlight><highlight class="normal">,<sp/>numPayloadBytes,<sp/>payload);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> Acknowledgements are received asynchronously. The acknowledgement handler will be called for each received acknowledgement.</para><para>This acknowledgement handler exercises the APIs for retrieving the publication information associated with the acknowledgement.</para><para><simplesect kind="note"><para>The acknowledgement handler is dispatched from the <computeroutput>DPS_Node&apos;s</computeroutput> thread. </para></simplesect>
</para></sect2>
</sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
