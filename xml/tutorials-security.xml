<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="tutorials-security" kind="page">
    <compoundname>tutorials-security</compoundname>
    <title>Securing the communications</title>
    <detaileddescription>
<sect1 id="tutorials-security_1enabling-network-layer-security">
<title>Enabling network layer security</title>
<para>Network layer security can be used to secure unicast communications between two nodes (a single hop). This includes the subscription, acknowledgement, and subscription acknowledgement messages. When the two nodes are <ref refid="tutorials-link" kindref="compound">linked </ref>, it also includes publications. Multicast publications are not secured. One of the end-to-end mechanisms described below must be used to secure multicast publications.</para><para>The first step to enabling network layer security is to build with a transport that supports it.</para><para><programlisting><codeline><highlight class="normal">$<sp/>scons<sp/>transport=dtls</highlight></codeline>
</programlisting></para><para>The DTLS transport supports two mechanisms for securing the connection: pre-shared keys, and certificates.</para><sect2 id="tutorials-security_1dtls-with-pre-shared-keys">
<title>DTLS with pre-shared keys</title>
<para><programlisting><codeline><highlight class="preprocessor">#define<sp/>BYTE_STR(s)<sp/>{<sp/>(const<sp/>uint8_t*)s,<sp/>sizeof(s)<sp/>-<sp/>1<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct___d_p_s___key" kindref="compound">DPS_Key</ref><sp/>PSK<sp/>=<sp/>{<sp/><ref refid="group__keystore_1gga7ca1045749c725e9c4a1b4758b2a0196a662c1e84628d96be8ae08163af382392" kindref="member">DPS_KEY_SYMMETRIC</ref>,<sp/>{<sp/>.symmetric<sp/>=<sp/>BYTE_STR(</highlight><highlight class="stringliteral">&quot;1234&quot;</highlight><highlight class="normal">)<sp/>}<sp/>};</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct___d_p_s___key_id" kindref="compound">DPS_KeyId</ref><sp/>PSK_ID<sp/>=<sp/>BYTE_STR(</highlight><highlight class="stringliteral">&quot;Tutorial<sp/>Network<sp/>PSK&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting>To use pre-shared keys (PSKs), we&apos;ll need to agree on a PSK and its identifier. <computeroutput>BYTE_STR</computeroutput> is a convenience macro used in the tutorials for using strings anywhere a buffer and its length is expected in the APIs.</para><para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*separators<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;/.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__keystore_1gaf3833cfe48f848f698514bc5daa075fa" kindref="member">DPS_KeyStore</ref>*<sp/>keyStore<sp/>=<sp/><ref refid="group__keystore_1gafa79de23848ff56d0cced67897313369" kindref="member">DPS_CreateKeyStore</ref>(PskAndIdHandler,<sp/>PskHandler,<sp/>NULL,<sp/>NULL);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct___d_p_s___key_id" kindref="compound">DPS_KeyId</ref>*<sp/>keyId<sp/>=<sp/>NULL;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__node_1ga4dd612ab965134321bb57fdb065f121c" kindref="member">DPS_Node</ref>*<sp/>node<sp/>=<sp/><ref refid="group__node_1gaf6641b5bbf27b2c45ac7f926b0ce4efe" kindref="member">DPS_CreateNode</ref>(separators,<sp/>keyStore,<sp/>keyId);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!node)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>Exit;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
</programlisting>All of the security mechanisms require that the node be created with a key store. The DTLS PSK mechanism requires that a <ref refid="group__keystore_1ga83d3ade4f4acd7d4385d606270ddfd29" kindref="member">DPS_KeyAndIdHandler</ref> and <ref refid="group__keystore_1gaccf7e3d43bc1e586132d7f1ae03d02f7" kindref="member">DPS_KeyHandler</ref> be provided.</para><para><programlisting><codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="group__status_1ga30395a84d3cad9d4ec29848106415038" kindref="member">DPS_Status</ref><sp/>PskAndIdHandler(<ref refid="group__keystore_1ga7c3e50965b65334e9791780fa855ed16" kindref="member">DPS_KeyStoreRequest</ref>*<sp/>request)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__keystore_1ga289b1c74c01c9988f04297aa082986de" kindref="member">DPS_SetKeyAndId</ref>(request,<sp/>&amp;PSK,<sp/>&amp;PSK_ID);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting>The key and identifier handler simply uses <ref refid="group__keystore_1ga289b1c74c01c9988f04297aa082986de" kindref="member">DPS_SetKeyAndId()</ref> to return the PSK and identifier we agreed on earlier.</para><para><programlisting><codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>IsSameKeyId(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct___d_p_s___key_id" kindref="compound">DPS_KeyId</ref>*<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct___d_p_s___key_id" kindref="compound">DPS_KeyId</ref>*<sp/>b)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(a-&gt;<ref refid="struct___d_p_s___key_id_1ad656ed0567e09b47f95776e8af0f29df" kindref="member">len</ref><sp/>==<sp/>b-&gt;<ref refid="struct___d_p_s___key_id_1ad656ed0567e09b47f95776e8af0f29df" kindref="member">len</ref>)<sp/>&amp;&amp;<sp/>!memcmp(a-&gt;<ref refid="struct___d_p_s___key_id_1a199ba6a4d89e6eab2b1c7f84db7b0e47" kindref="member">id</ref>,<sp/>b-&gt;<ref refid="struct___d_p_s___key_id_1a199ba6a4d89e6eab2b1c7f84db7b0e47" kindref="member">id</ref>,<sp/>a-&gt;<ref refid="struct___d_p_s___key_id_1ad656ed0567e09b47f95776e8af0f29df" kindref="member">len</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="group__status_1ga30395a84d3cad9d4ec29848106415038" kindref="member">DPS_Status</ref><sp/>PskHandler(<ref refid="group__keystore_1ga7c3e50965b65334e9791780fa855ed16" kindref="member">DPS_KeyStoreRequest</ref>*<sp/>request,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct___d_p_s___key_id" kindref="compound">DPS_KeyId</ref>*<sp/>keyId)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsSameKeyId(keyId,<sp/>&amp;PSK_ID))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__keystore_1ga15d6a9b8256b67c2ec8b1d365a98dbab" kindref="member">DPS_SetKey</ref>(request,<sp/>&amp;PSK);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__status_1ga5c46980c33492a8b76bffce081dbcba4" kindref="member">DPS_ERR_MISSING</ref>;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting>The key handler is used for PSKs as well as other keys, so it must compare the incoming <computeroutput>keyId</computeroutput> against the PSK identifier and either return the PSK using <ref refid="group__keystore_1ga15d6a9b8256b67c2ec8b1d365a98dbab" kindref="member">DPS_SetKey()</ref> or return <ref refid="group__status_1ga5c46980c33492a8b76bffce081dbcba4" kindref="member">DPS_ERR_MISSING</ref>.</para><para><simplesect kind="see"><para><ref refid="group__keystore_1ga2da4c5f9b7ab5ff6b65d1c8f4d6c30bc" kindref="member">DPS_CreateMemoryKeyStore()</ref>, <ref refid="group__keystore_1ga8664b8c5cc2d3df6512ecb71e7f92212" kindref="member">DPS_SetNetworkKey()</ref></para></simplesect>
</para></sect2>
<sect2 id="tutorials-security_1dtls-with-certificates">
<title>DTLS with certificates</title>
<para><programlisting><codeline><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>CA_CERTIFICATE;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct___d_p_s___key_id" kindref="compound">DPS_KeyId</ref><sp/>keyId;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct___d_p_s___key" kindref="compound">DPS_Key</ref><sp/>key;</highlight></codeline>
<codeline><highlight class="normal">}<sp/>Certificate;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Certificate<sp/>CERTIFICATES[];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;tutorial_certs.c&quot;</highlight><highlight class="normal"></highlight></codeline>
</programlisting>To use certificates, we&apos;ll need a certificate for each node and the certificates of the authorities that issued them. DPS supports Elliptic Curve Cryptography (ECC) certificates. The certificates above are omitted due to their size.</para><para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*separators<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;/.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__keystore_1gaf3833cfe48f848f698514bc5daa075fa" kindref="member">DPS_KeyStore</ref>*<sp/>keyStore<sp/>=<sp/><ref refid="group__keystore_1gafa79de23848ff56d0cced67897313369" kindref="member">DPS_CreateKeyStore</ref>(NULL,<sp/>CertificateHandler,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL,<sp/>CertificateAuthoritiesHandler);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct___d_p_s___key_id" kindref="compound">DPS_KeyId</ref>*<sp/>keyId<sp/>=<sp/>nodeId;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__node_1ga4dd612ab965134321bb57fdb065f121c" kindref="member">DPS_Node</ref>*<sp/>node<sp/>=<sp/><ref refid="group__node_1gaf6641b5bbf27b2c45ac7f926b0ce4efe" kindref="member">DPS_CreateNode</ref>(separators,<sp/>keyStore,<sp/>keyId);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!node)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>Exit;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
</programlisting>Again, all of the security mechanisms require that the node be created with a key store. The DTLS certificate mechanism requires that a <ref refid="group__keystore_1gaccf7e3d43bc1e586132d7f1ae03d02f7" kindref="member">DPS_KeyHandler</ref> and <ref refid="group__keystore_1ga0acd005f34bca4fcbe1c460e2305ddae" kindref="member">DPS_CAHandler</ref> be provided.</para><para>The certificate mechanism also requires that the <computeroutput>keyId</computeroutput> parameter be provided. This is the key identifier of the public key (<ref refid="struct___d_p_s___key_cert_1a2783654ef73f2cc58911f40cd6e4f6ba" kindref="member">_DPS_KeyCert::cert</ref>), private key (<ref refid="struct___d_p_s___key_cert_1a0ba1842f3982c930ba76469349b0812d" kindref="member">_DPS_KeyCert::privateKey</ref>), and optional password (<ref refid="struct___d_p_s___key_cert_1a18f3f492b66fbeb3de6a09aff54369cf" kindref="member">_DPS_KeyCert::password</ref>) of the created node. This <computeroutput>keyId</computeroutput> value will be provided to the <ref refid="group__keystore_1gaccf7e3d43bc1e586132d7f1ae03d02f7" kindref="member">DPS_KeyHandler</ref> when the node&apos;s own certificate is requested.</para><para><programlisting><codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="group__status_1ga30395a84d3cad9d4ec29848106415038" kindref="member">DPS_Status</ref><sp/>CertificateAuthoritiesHandler(<ref refid="group__keystore_1ga7c3e50965b65334e9791780fa855ed16" kindref="member">DPS_KeyStoreRequest</ref>*<sp/>request)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__keystore_1ga37595f3207e42c52f7006659399135b2" kindref="member">DPS_SetCA</ref>(request,<sp/>CA_CERTIFICATE);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting>The certificate authorities handler simply uses <ref refid="group__keystore_1ga37595f3207e42c52f7006659399135b2" kindref="member">DPS_SetCA()</ref> to return the certificate authorities we trust. To include more than one certificate as shown in this example, concatenate the certificates together.</para><para><programlisting><codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="group__status_1ga30395a84d3cad9d4ec29848106415038" kindref="member">DPS_Status</ref><sp/>CertificateHandler(<ref refid="group__keystore_1ga7c3e50965b65334e9791780fa855ed16" kindref="member">DPS_KeyStoreRequest</ref>*<sp/>request,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct___d_p_s___key_id" kindref="compound">DPS_KeyId</ref>*<sp/>keyId)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Certificate*<sp/>certificate;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(certificate<sp/>=<sp/>CERTIFICATES;<sp/>certificate-&gt;keyId.id;<sp/>++certificate)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsSameKeyId(keyId,<sp/>&amp;certificate-&gt;keyId))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__keystore_1ga15d6a9b8256b67c2ec8b1d365a98dbab" kindref="member">DPS_SetKey</ref>(request,<sp/>&amp;certificate-&gt;key);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__status_1ga5c46980c33492a8b76bffce081dbcba4" kindref="member">DPS_ERR_MISSING</ref>;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting>The key handler is used for certificates as well as other keys, so it must compare the incoming <computeroutput>keyId</computeroutput> against the certificate identifier and either return the certificate using <ref refid="group__keystore_1ga15d6a9b8256b67c2ec8b1d365a98dbab" kindref="member">DPS_SetKey()</ref> or return <ref refid="group__status_1ga5c46980c33492a8b76bffce081dbcba4" kindref="member">DPS_ERR_MISSING</ref>.</para><para>Only the certificate with the key identifier provided to <ref refid="group__node_1gaf6641b5bbf27b2c45ac7f926b0ce4efe" kindref="member">DPS_CreateNode()</ref> needs to include the private key (<ref refid="struct___d_p_s___key_cert_1a0ba1842f3982c930ba76469349b0812d" kindref="member">_DPS_KeyCert::privateKey</ref>) and optional password (<ref refid="struct___d_p_s___key_cert_1a18f3f492b66fbeb3de6a09aff54369cf" kindref="member">_DPS_KeyCert::password</ref>). For all other certificates, the public key (<ref refid="struct___d_p_s___key_cert_1a2783654ef73f2cc58911f40cd6e4f6ba" kindref="member">_DPS_KeyCert::cert</ref>) is sufficient.</para><para><simplesect kind="see"><para><ref refid="group__keystore_1ga8d55f887ebbd6b0af80caa43bf77a088" kindref="member">DPS_SetTrustedCA()</ref>, <ref refid="group__keystore_1ga7a8c6874dd5bff0a6391a5515b545e17" kindref="member">DPS_SetCertificate()</ref></para></simplesect>
</para></sect2>
</sect1>
<sect1 id="tutorials-security_1protecting-the-payload">
<title>Protecting the payload</title>
<para>While network layer security allows us to secure the communications of a single hop, encrypting the payload allows us to secure the payload across multiple hops. The payload can only be decrypted by the receiving node.</para><para>Encrypting a payload uses two keys: the content encryption key that encrypts the payload and the key encryption key that encrypts the content encryption key. This indirection allows a single instance of the payload to be encrypted for multiple recipients.</para><para>The content encryption key is always an ephemeral AES key. The key encryption key may be a symmetric or asymmetric key.</para><sect2 id="tutorials-security_1encrypting-with-a-symmetric-key">
<title>Encrypting with a symmetric key</title>
<para><programlisting><codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>AES_128_KEY[16]<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>0x27,<sp/>0xbd,<sp/>0xa7,<sp/>0x4f,<sp/>0xd7,<sp/>0x60,<sp/>0xff,<sp/>0x48,<sp/>0x10,<sp/>0x59,<sp/>0x56,<sp/>0xde,<sp/>0x8f,<sp/>0x4b,<sp/>0x45,<sp/>0x70</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct___d_p_s___key" kindref="compound">DPS_Key</ref><sp/>SYMMETRIC_KEY<sp/>=<sp/>{<sp/><ref refid="group__keystore_1gga7ca1045749c725e9c4a1b4758b2a0196a662c1e84628d96be8ae08163af382392" kindref="member">DPS_KEY_SYMMETRIC</ref>,<sp/>{<sp/>.symmetric<sp/>=<sp/>{<sp/>AES_128_KEY,<sp/>16<sp/>}<sp/>}<sp/>};</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct___d_p_s___key_id" kindref="compound">DPS_KeyId</ref><sp/>SYMMETRIC_KEY_ID<sp/>=<sp/>BYTE_STR(</highlight><highlight class="stringliteral">&quot;Tutorial<sp/>Symmetric<sp/>Key&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting>To use a symmetric key encryption key, we&apos;ll need to agree on its value and identifier.</para><para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*separators<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;/.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__keystore_1gaf3833cfe48f848f698514bc5daa075fa" kindref="member">DPS_KeyStore</ref>*<sp/>keyStore<sp/>=<sp/><ref refid="group__keystore_1gafa79de23848ff56d0cced67897313369" kindref="member">DPS_CreateKeyStore</ref>(NULL,<sp/>SymmetricKeyHandler,<sp/>EphemeralSymmetricKeyHandler,<sp/>NULL);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct___d_p_s___key_id" kindref="compound">DPS_KeyId</ref>*<sp/>keyId<sp/>=<sp/>NULL;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__node_1ga4dd612ab965134321bb57fdb065f121c" kindref="member">DPS_Node</ref>*<sp/>node<sp/>=<sp/><ref refid="group__node_1gaf6641b5bbf27b2c45ac7f926b0ce4efe" kindref="member">DPS_CreateNode</ref>(separators,<sp/>keyStore,<sp/>keyId);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!node)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>Exit;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
</programlisting>Again, all of the security mechanisms require that the node be created with a key store. The payload encryption mechanism requires that a <ref refid="group__keystore_1gaccf7e3d43bc1e586132d7f1ae03d02f7" kindref="member">DPS_KeyHandler</ref> and <ref refid="group__keystore_1ga5b4cf102912eea802196d3e307c399ef" kindref="member">DPS_EphemeralKeyHandler</ref> be provided.</para><para><programlisting><codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="group__status_1ga30395a84d3cad9d4ec29848106415038" kindref="member">DPS_Status</ref><sp/>SymmetricKeyHandler(<ref refid="group__keystore_1ga7c3e50965b65334e9791780fa855ed16" kindref="member">DPS_KeyStoreRequest</ref>*<sp/>request,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct___d_p_s___key_id" kindref="compound">DPS_KeyId</ref>*<sp/>keyId)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsSameKeyId(keyId,<sp/>&amp;SYMMETRIC_KEY_ID))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__keystore_1ga15d6a9b8256b67c2ec8b1d365a98dbab" kindref="member">DPS_SetKey</ref>(request,<sp/>&amp;SYMMETRIC_KEY);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__status_1ga5c46980c33492a8b76bffce081dbcba4" kindref="member">DPS_ERR_MISSING</ref>;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting>The key handler is used for symmetric keys as well as other keys, so it must compare the incoming <computeroutput>keyId</computeroutput> against the symmetric key encryption key identifier and either return the key using <ref refid="group__keystore_1ga15d6a9b8256b67c2ec8b1d365a98dbab" kindref="member">DPS_SetKey()</ref> or return <ref refid="group__status_1ga5c46980c33492a8b76bffce081dbcba4" kindref="member">DPS_ERR_MISSING</ref>.</para><para><programlisting><codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="group__status_1ga30395a84d3cad9d4ec29848106415038" kindref="member">DPS_Status</ref><sp/>EphemeralSymmetricKeyHandler(<ref refid="group__keystore_1ga7c3e50965b65334e9791780fa855ed16" kindref="member">DPS_KeyStoreRequest</ref>*<sp/>request,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct___d_p_s___key" kindref="compound">DPS_Key</ref>*<sp/>key)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key-&gt;<ref refid="struct___d_p_s___key_1a347677e64145828ed5b1191a8fdc71d5" kindref="member">type</ref><sp/>==<sp/><ref refid="group__keystore_1gga7ca1045749c725e9c4a1b4758b2a0196a662c1e84628d96be8ae08163af382392" kindref="member">DPS_KEY_SYMMETRIC</ref>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>key[16];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GenerateRandomKey(key);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct___d_p_s___key" kindref="compound">DPS_Key</ref><sp/>ephemeralKey<sp/>=<sp/>{<sp/><ref refid="group__keystore_1gga7ca1045749c725e9c4a1b4758b2a0196a662c1e84628d96be8ae08163af382392" kindref="member">DPS_KEY_SYMMETRIC</ref>,<sp/>{<sp/>.symmetric<sp/>=<sp/>{<sp/>key,<sp/>16<sp/>}<sp/>}<sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__keystore_1ga15d6a9b8256b67c2ec8b1d365a98dbab" kindref="member">DPS_SetKey</ref>(request,<sp/>&amp;ephemeralKey);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__status_1ga5c46980c33492a8b76bffce081dbcba4" kindref="member">DPS_ERR_MISSING</ref>;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting>The ephemeral key handler is used for symmetric keys as well as other keys, so it must examine the incoming <computeroutput>key</computeroutput> type to determine what type of ephemeral key to return. It creates a random key of the requested type and returns it using <ref refid="group__keystore_1ga15d6a9b8256b67c2ec8b1d365a98dbab" kindref="member">DPS_SetKey()</ref>. If it cannot do that, it must return <ref refid="group__status_1ga5c46980c33492a8b76bffce081dbcba4" kindref="member">DPS_ERR_MISSING</ref>.</para><para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/><ref refid="group__publication_1ga91471ddf6f66798e255b28b3e913144b" kindref="member">DPS_PublicationAddSubId</ref>(pub,<sp/>&amp;SYMMETRIC_KEY_ID);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>!=<sp/><ref refid="group__status_1ga0ea3dd37bc558859ae0cb5a4f79a4bdd" kindref="member">DPS_OK</ref>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>Exit;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
</programlisting>Lastly, we add the key encryption key identifier to the publication.</para><para>This may be called multiple times with different key identifiers for a single publication. This allows an application to, for example, associate topics with key identifiers and initialize and encrypt a publication with multiple topics.</para><para>Acknowledgement payloads will be protected using the same key encryption key identifier the recipient used to decrypt the publication.</para><para><simplesect kind="see"><para><ref refid="group__keystore_1ga1855a8efae53b90fa95aa5b97295c4ec" kindref="member">DPS_SetContentKey()</ref></para></simplesect>
</para></sect2>
<sect2 id="tutorials-security_1encrypting-with-an-asymmetric-key">
<title>Encrypting with an asymmetric key</title>
<para>The steps necessary to use an asymmetric key encryption key are very similar to the steps needed to use a symmetric key encryption key, described above. Only the differences are highlighted below.</para><para><simplesect kind="note"><para>Acknowledgement payloads will be encrypted using the same asymmetric key identifier the recipient used to decrypt the publication. As this is an ephemeral key, the encryption will fail. For this reason it is recommended to use this mechanism only with <ref refid="tutorials-security_1authenticating-the-message-sender" kindref="member">authenticated senders </ref> which prevents this failure.</para></simplesect>
<programlisting><codeline><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct___d_p_s___key" kindref="compound">DPS_Key</ref><sp/>ASYMMETRIC_KEY;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct___d_p_s___key_id" kindref="compound">DPS_KeyId</ref><sp/>ASYMMETRIC_KEY_ID<sp/>=<sp/>BYTE_STR(</highlight><highlight class="stringliteral">&quot;Tutorial<sp/>Asymmetric<sp/>Key&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting>To use asymmetric key encryption keys, the publisher will need the public key (<ref refid="struct___d_p_s___key_cert_1a2783654ef73f2cc58911f40cd6e4f6ba" kindref="member">_DPS_KeyCert::cert</ref>) of each recipient and each recipient will also need the private key (<ref refid="struct___d_p_s___key_cert_1a0ba1842f3982c930ba76469349b0812d" kindref="member">_DPS_KeyCert::privateKey</ref>) and optional password (<ref refid="struct___d_p_s___key_cert_1a18f3f492b66fbeb3de6a09aff54369cf" kindref="member">_DPS_KeyCert::password</ref>). The term recipient is used here instead of subscriber since a single recipient key may be used by multiple subscribers.</para><para>For this example we are using only one recipient. DPS supports Elliptic Curve Cryptography (ECC) certificates. The certificate above is elided due to its size.</para><para><programlisting><codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="group__status_1ga30395a84d3cad9d4ec29848106415038" kindref="member">DPS_Status</ref><sp/>EphemeralAsymmetricKeyHandler(<ref refid="group__keystore_1ga7c3e50965b65334e9791780fa855ed16" kindref="member">DPS_KeyStoreRequest</ref>*<sp/>request,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct___d_p_s___key" kindref="compound">DPS_Key</ref>*<sp/>key)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key-&gt;<ref refid="struct___d_p_s___key_1a347677e64145828ed5b1191a8fdc71d5" kindref="member">type</ref><sp/>==<sp/><ref refid="group__keystore_1gga7ca1045749c725e9c4a1b4758b2a0196a662c1e84628d96be8ae08163af382392" kindref="member">DPS_KEY_SYMMETRIC</ref>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>key[16];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GenerateRandomKey(key);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct___d_p_s___key" kindref="compound">DPS_Key</ref><sp/>ephemeralKey<sp/>=<sp/>{<sp/><ref refid="group__keystore_1gga7ca1045749c725e9c4a1b4758b2a0196a662c1e84628d96be8ae08163af382392" kindref="member">DPS_KEY_SYMMETRIC</ref>,<sp/>{<sp/>.symmetric<sp/>=<sp/>{<sp/>key,<sp/>16<sp/>}<sp/>}<sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__keystore_1ga15d6a9b8256b67c2ec8b1d365a98dbab" kindref="member">DPS_SetKey</ref>(request,<sp/>&amp;ephemeralKey);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key-&gt;<ref refid="struct___d_p_s___key_1a347677e64145828ed5b1191a8fdc71d5" kindref="member">type</ref><sp/>==<sp/><ref refid="group__keystore_1gga7ca1045749c725e9c4a1b4758b2a0196a58453a89367757e523ac337232387d89" kindref="member">DPS_KEY_EC</ref>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>x[66],<sp/>y[66],<sp/>d[66];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GenerateEphemeralKey(key-&gt;<ref refid="struct___d_p_s___key_1a8cf482ff4fe81b774462469c5da9295f" kindref="member">ec</ref>.<ref refid="struct___d_p_s___key_e_c_1a9896c40cd0b6dd0bd05ac5831fc421d9" kindref="member">curve</ref>,<sp/>x,<sp/>y,<sp/>d);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct___d_p_s___key" kindref="compound">DPS_Key</ref><sp/>ephemeralKey<sp/>=<sp/>{<sp/><ref refid="group__keystore_1gga7ca1045749c725e9c4a1b4758b2a0196a58453a89367757e523ac337232387d89" kindref="member">DPS_KEY_EC</ref>,<sp/>{<sp/>.ec<sp/>=<sp/>{<sp/>key-&gt;<ref refid="struct___d_p_s___key_1a8cf482ff4fe81b774462469c5da9295f" kindref="member">ec</ref>.<ref refid="struct___d_p_s___key_e_c_1a9896c40cd0b6dd0bd05ac5831fc421d9" kindref="member">curve</ref>,<sp/>x,<sp/>y,<sp/>d<sp/>}<sp/>}<sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__keystore_1ga15d6a9b8256b67c2ec8b1d365a98dbab" kindref="member">DPS_SetKey</ref>(request,<sp/>&amp;ephemeralKey);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__status_1ga5c46980c33492a8b76bffce081dbcba4" kindref="member">DPS_ERR_MISSING</ref>;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting>The ephemeral key handler is used for both symmetric and asymmetric keys, so it must examine the incoming <computeroutput>key</computeroutput> type to determine what type of ephemeral key to return. For <ref refid="group__keystore_1gga7ca1045749c725e9c4a1b4758b2a0196a58453a89367757e523ac337232387d89" kindref="member">DPS_KEY_EC</ref> types, the ECC curve must also be examined.</para><para>The ephemeral ECC key requested here is the ephemeral sender key. The actual key encryption key is derived from the sender and recipient ECC keys.</para><para>In either case, the key handler creates a random key of the requested type (and curve) and returns it using <ref refid="group__keystore_1ga15d6a9b8256b67c2ec8b1d365a98dbab" kindref="member">DPS_SetKey()</ref>. If it cannot do that, it must return <ref refid="group__status_1ga5c46980c33492a8b76bffce081dbcba4" kindref="member">DPS_ERR_MISSING</ref>.</para></sect2>
</sect1>
<sect1 id="tutorials-security_1authenticating-the-message-sender">
<title>Authenticating the message sender</title>
<para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*separators<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;/.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__keystore_1gaf3833cfe48f848f698514bc5daa075fa" kindref="member">DPS_KeyStore</ref>*<sp/>keyStore<sp/>=<sp/><ref refid="group__keystore_1gafa79de23848ff56d0cced67897313369" kindref="member">DPS_CreateKeyStore</ref>(NULL,<sp/>KeyHandler,<sp/>EphemeralKeyHandler,<sp/>NULL);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct___d_p_s___key_id" kindref="compound">DPS_KeyId</ref>*<sp/>keyId<sp/>=<sp/>nodeId;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__node_1ga4dd612ab965134321bb57fdb065f121c" kindref="member">DPS_Node</ref>*<sp/>node<sp/>=<sp/><ref refid="group__node_1gaf6641b5bbf27b2c45ac7f926b0ce4efe" kindref="member">DPS_CreateNode</ref>(separators,<sp/>keyStore,<sp/>keyId);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!node)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>Exit;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
</programlisting>Authenticating the sender requires that the <computeroutput>keyId</computeroutput> parameter be provided. This is the key identifier of the public key (<ref refid="struct___d_p_s___key_cert_1a2783654ef73f2cc58911f40cd6e4f6ba" kindref="member">_DPS_KeyCert::cert</ref>), private key (<ref refid="struct___d_p_s___key_cert_1a0ba1842f3982c930ba76469349b0812d" kindref="member">_DPS_KeyCert::privateKey</ref>), and optional password (<ref refid="struct___d_p_s___key_cert_1a18f3f492b66fbeb3de6a09aff54369cf" kindref="member">_DPS_KeyCert::password</ref>) of the created node. This <computeroutput>keyId</computeroutput> value will be provided to the <ref refid="group__keystore_1gaccf7e3d43bc1e586132d7f1ae03d02f7" kindref="member">DPS_KeyHandler</ref> when the node&apos;s own certificate is requested.</para><para><programlisting><codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="group__status_1ga30395a84d3cad9d4ec29848106415038" kindref="member">DPS_Status</ref><sp/>KeyHandler(<ref refid="group__keystore_1ga7c3e50965b65334e9791780fa855ed16" kindref="member">DPS_KeyStoreRequest</ref>*<sp/>request,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct___d_p_s___key_id" kindref="compound">DPS_KeyId</ref>*<sp/>keyId)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Certificate*<sp/>certificate;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(certificate<sp/>=<sp/>CERTIFICATES;<sp/>certificate-&gt;keyId.id;<sp/>++certificate)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsSameKeyId(keyId,<sp/>&amp;certificate-&gt;keyId))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__keystore_1ga15d6a9b8256b67c2ec8b1d365a98dbab" kindref="member">DPS_SetKey</ref>(request,<sp/>&amp;certificate-&gt;key);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsSameKeyId(keyId,<sp/>&amp;SYMMETRIC_KEY_ID))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__keystore_1ga15d6a9b8256b67c2ec8b1d365a98dbab" kindref="member">DPS_SetKey</ref>(request,<sp/>&amp;SYMMETRIC_KEY);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsSameKeyId(keyId,<sp/>&amp;ASYMMETRIC_KEY_ID))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__keystore_1ga15d6a9b8256b67c2ec8b1d365a98dbab" kindref="member">DPS_SetKey</ref>(request,<sp/>&amp;ASYMMETRIC_KEY);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__status_1ga5c46980c33492a8b76bffce081dbcba4" kindref="member">DPS_ERR_MISSING</ref>;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting>The key handler implementation above supports all the mechanisms described so far.</para><para><programlisting><codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="group__status_1ga30395a84d3cad9d4ec29848106415038" kindref="member">DPS_Status</ref><sp/>EphemeralKeyHandler(<ref refid="group__keystore_1ga7c3e50965b65334e9791780fa855ed16" kindref="member">DPS_KeyStoreRequest</ref>*<sp/>request,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct___d_p_s___key" kindref="compound">DPS_Key</ref>*<sp/>key)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key-&gt;<ref refid="struct___d_p_s___key_1a347677e64145828ed5b1191a8fdc71d5" kindref="member">type</ref><sp/>==<sp/><ref refid="group__keystore_1gga7ca1045749c725e9c4a1b4758b2a0196a662c1e84628d96be8ae08163af382392" kindref="member">DPS_KEY_SYMMETRIC</ref>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>key[16];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GenerateRandomKey(key);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct___d_p_s___key" kindref="compound">DPS_Key</ref><sp/>ephemeralKey<sp/>=<sp/>{<sp/><ref refid="group__keystore_1gga7ca1045749c725e9c4a1b4758b2a0196a662c1e84628d96be8ae08163af382392" kindref="member">DPS_KEY_SYMMETRIC</ref>,<sp/>{<sp/>.symmetric<sp/>=<sp/>{<sp/>key,<sp/>16<sp/>}<sp/>}<sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__keystore_1ga15d6a9b8256b67c2ec8b1d365a98dbab" kindref="member">DPS_SetKey</ref>(request,<sp/>&amp;ephemeralKey);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key-&gt;<ref refid="struct___d_p_s___key_1a347677e64145828ed5b1191a8fdc71d5" kindref="member">type</ref><sp/>==<sp/><ref refid="group__keystore_1gga7ca1045749c725e9c4a1b4758b2a0196a58453a89367757e523ac337232387d89" kindref="member">DPS_KEY_EC</ref>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>x[66],<sp/>y[66],<sp/>d[66];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GenerateEphemeralKey(key-&gt;<ref refid="struct___d_p_s___key_1a8cf482ff4fe81b774462469c5da9295f" kindref="member">ec</ref>.<ref refid="struct___d_p_s___key_e_c_1a9896c40cd0b6dd0bd05ac5831fc421d9" kindref="member">curve</ref>,<sp/>x,<sp/>y,<sp/>d);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct___d_p_s___key" kindref="compound">DPS_Key</ref><sp/>ephemeralKey<sp/>=<sp/>{<sp/><ref refid="group__keystore_1gga7ca1045749c725e9c4a1b4758b2a0196a58453a89367757e523ac337232387d89" kindref="member">DPS_KEY_EC</ref>,<sp/>{<sp/>.ec<sp/>=<sp/>{<sp/>key-&gt;<ref refid="struct___d_p_s___key_1a8cf482ff4fe81b774462469c5da9295f" kindref="member">ec</ref>.<ref refid="struct___d_p_s___key_e_c_1a9896c40cd0b6dd0bd05ac5831fc421d9" kindref="member">curve</ref>,<sp/>x,<sp/>y,<sp/>d<sp/>}<sp/>}<sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__keystore_1ga15d6a9b8256b67c2ec8b1d365a98dbab" kindref="member">DPS_SetKey</ref>(request,<sp/>&amp;ephemeralKey);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__status_1ga5c46980c33492a8b76bffce081dbcba4" kindref="member">DPS_ERR_MISSING</ref>;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting>The ephemeral key handler implementation above supports all the mechanisms described so far.</para><para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct___d_p_s___key_id" kindref="compound">DPS_KeyId</ref>*<sp/>keyId<sp/>=<sp/><ref refid="group__publication_1ga1d7e81c2f0b19736a4f7a7195e5bd98d" kindref="member">DPS_PublicationGetSenderKeyId</ref>(pub);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__debug_1gaf1d25cc7f1d2d92f96ba620217af28fd" kindref="member">DPS_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;sender=%.*s\n&quot;</highlight><highlight class="normal">,<sp/>keyId-&gt;<ref refid="struct___d_p_s___key_id_1ad656ed0567e09b47f95776e8af0f29df" kindref="member">len</ref>,<sp/>keyId-&gt;<ref refid="struct___d_p_s___key_id_1a199ba6a4d89e6eab2b1c7f84db7b0e47" kindref="member">id</ref>);</highlight></codeline>
</programlisting><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct___d_p_s___key_id" kindref="compound">DPS_KeyId</ref>*<sp/>keyId<sp/>=<sp/><ref refid="group__publication_1ga9190b8fa3bad848fb428acd6c0c2b210" kindref="member">DPS_AckGetSenderKeyId</ref>(pub);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__debug_1gaf1d25cc7f1d2d92f96ba620217af28fd" kindref="member">DPS_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;sender=%.*s\n&quot;</highlight><highlight class="normal">,<sp/>keyId-&gt;<ref refid="struct___d_p_s___key_id_1ad656ed0567e09b47f95776e8af0f29df" kindref="member">len</ref>,<sp/>keyId-&gt;<ref refid="struct___d_p_s___key_id_1a199ba6a4d89e6eab2b1c7f84db7b0e47" kindref="member">id</ref>);</highlight></codeline>
</programlisting>In the publication or acknowledgement handler, the authenticated key identifier can be retrieved with <ref refid="group__publication_1ga1d7e81c2f0b19736a4f7a7195e5bd98d" kindref="member">DPS_PublicationGetSenderKeyId()</ref> or <ref refid="group__publication_1ga9190b8fa3bad848fb428acd6c0c2b210" kindref="member">DPS_AckGetSenderKeyId()</ref>.</para></sect1>
<sect1 id="tutorials-security_1adding-access-control">
<title>Adding access control</title>
<para>Adding access control is a matter of combining the existing mechanisms to enforce any policies the application needs. A simple example is shown below.</para><sect2 id="tutorials-security_1defining-a-policy">
<title>Defining a policy</title>
<para><programlisting><codeline><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*topic;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct___d_p_s___key_id" kindref="compound">DPS_KeyId</ref><sp/>keyId;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PUB<sp/>=<sp/>(1&lt;&lt;0),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SUB<sp/>=<sp/>(1&lt;&lt;1),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ACK<sp/>=<sp/>(1&lt;&lt;2)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>bits;</highlight></codeline>
<codeline><highlight class="normal">}<sp/>AccessControlEntry;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>AccessControlEntry<sp/>ACL[]<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;a/b/c/d&quot;</highlight><highlight class="normal">,<sp/>BYTE_STR(</highlight><highlight class="stringliteral">&quot;alice&quot;</highlight><highlight class="normal">),<sp/>PUB<sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;a/b/c/d&quot;</highlight><highlight class="normal">,<sp/>BYTE_STR(</highlight><highlight class="stringliteral">&quot;bob&quot;</highlight><highlight class="normal">),<sp/><sp/><sp/>SUB<sp/>|<sp/>ACK<sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;a/b/c/d&quot;</highlight><highlight class="normal">,<sp/>BYTE_STR(</highlight><highlight class="stringliteral">&quot;trudy&quot;</highlight><highlight class="normal">),<sp/>SUB<sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>NULL,<sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>NULL,<sp/>0<sp/>},<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>IsAllowed(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct___d_p_s___key_id" kindref="compound">DPS_KeyId</ref>*<sp/>keyId,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bits,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__publication_1ga0d439693474aa54e27f3d45a054696ac" kindref="member">DPS_Publication</ref>*<sp/>pub)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>AccessControlEntry*<sp/>ace;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ace<sp/>=<sp/>ACL;<sp/>ace-&gt;keyId.id;<sp/>++ace)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsSameKeyId(keyId,<sp/>&amp;ace-&gt;keyId)<sp/>&amp;&amp;<sp/>(bits<sp/>&amp;<sp/>ace-&gt;bits))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="group__publication_1gaee6fc3b13484faacff0d26646778f777" kindref="member">DPS_PublicationGetNumTopics</ref>(pub);<sp/>++i)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(ace-&gt;topic,<sp/><ref refid="group__publication_1ga143a5c6fbe0bdf1725e841f122582432" kindref="member">DPS_PublicationGetTopic</ref>(pub,<sp/>i)))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="dps_8h_1a4a173ed2665cea74e58558d99b377ab3" kindref="member">DPS_TRUE</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="dps_8h_1ad8b397975a479b996ef223367d8835a9" kindref="member">DPS_FALSE</ref>;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting>In the above we will allow <computeroutput>alice</computeroutput> to publish to topic <computeroutput>a/b/c/d</computeroutput>, <computeroutput>bob</computeroutput> to subscribe and acknowledge to topic <computeroutput>a/b/c/d</computeroutput>, and <computeroutput>trudy</computeroutput> to subscribe to topic <computeroutput>a/b/c/d</computeroutput>.</para><para><computeroutput>IsAllowed</computeroutput> implements the policy by searching through the access control list for matching key identifiers and access bits and uses <ref refid="group__publication_1gaee6fc3b13484faacff0d26646778f777" kindref="member">DPS_PublicationGetNumTopics()</ref> and <ref refid="group__publication_1ga143a5c6fbe0bdf1725e841f122582432" kindref="member">DPS_PublicationGetTopic()</ref> to check the topic.</para></sect2>
<sect2 id="tutorials-security_1implementing-subscription-control">
<title>Implementing subscription control</title>
<para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/><ref refid="group__publication_1ga7b0709e28cb34d5a30b90e4142cd6c19" kindref="member">DPS_InitPublication</ref>(pub,<sp/>topics,<sp/>numTopics,<sp/>noWildCard,<sp/>NULL,<sp/>AcknowledgementHandler);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>!=<sp/><ref refid="group__status_1ga0ea3dd37bc558859ae0cb5a4f79a4bdd" kindref="member">DPS_OK</ref>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>Exit;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>AccessControlEntry*<sp/>ace;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ace<sp/>=<sp/>ACL;<sp/>ace-&gt;keyId.id;<sp/>++ace)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsAllowed(&amp;ace-&gt;keyId,<sp/>SUB,<sp/>pub))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/><ref refid="group__publication_1ga91471ddf6f66798e255b28b3e913144b" kindref="member">DPS_PublicationAddSubId</ref>(pub,<sp/>&amp;ace-&gt;keyId);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>!=<sp/><ref refid="group__status_1ga0ea3dd37bc558859ae0cb5a4f79a4bdd" kindref="member">DPS_OK</ref>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>Exit;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
</programlisting>After initializing the publication, we use <ref refid="group__publication_1ga91471ddf6f66798e255b28b3e913144b" kindref="member">DPS_PublicationAddSubId()</ref> to add only the key identifiers of allowed subscribers. Any other subscribers will be unable to decrypt the publication.</para></sect2>
<sect2 id="tutorials-security_1implementing-publication-control">
<title>Implementing publication control</title>
<para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct___d_p_s___key_id" kindref="compound">DPS_KeyId</ref>*<sp/>keyId<sp/>=<sp/><ref refid="group__publication_1ga1d7e81c2f0b19736a4f7a7195e5bd98d" kindref="member">DPS_PublicationGetSenderKeyId</ref>(pub);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!IsAllowed(keyId,<sp/>PUB,<sp/>pub))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__debug_1gaf1d25cc7f1d2d92f96ba620217af28fd" kindref="member">DPS_PRINT</ref>(</highlight><highlight class="stringliteral">&quot;Rejecting<sp/>publication\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Proceed<sp/>with<sp/>application<sp/>handling<sp/>of<sp/>publication...<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
</programlisting>In the publication handler before any application-specific handling is done, we use <ref refid="group__publication_1ga1d7e81c2f0b19736a4f7a7195e5bd98d" kindref="member">DPS_PublicationGetSenderKeyId()</ref> to first check if the sender is allowed to publish to the topic. If not, we reject the publication.</para></sect2>
<sect2 id="tutorials-security_1implementing-acknowledgement-control">
<title>Implementing acknowledgement control</title>
<para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct___d_p_s___key_id" kindref="compound">DPS_KeyId</ref>*<sp/>keyId<sp/>=<sp/><ref refid="group__publication_1ga9190b8fa3bad848fb428acd6c0c2b210" kindref="member">DPS_AckGetSenderKeyId</ref>(pub);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!IsAllowed(keyId,<sp/>ACK,<sp/>pub))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__debug_1gac69225c4b8e73b27204a2963d4ca0633" kindref="member">DPS_ERRPRINT</ref>(</highlight><highlight class="stringliteral">&quot;Rejecting<sp/>acknowledgement\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Proceed<sp/>with<sp/>application<sp/>handling<sp/>of<sp/>acknowledgement...<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
</programlisting>In the acknowledgement handler, before any application-specific handling is done, we use <ref refid="group__publication_1ga9190b8fa3bad848fb428acd6c0c2b210" kindref="member">DPS_AckGetSenderKeyId()</ref> to first check if the sender is allowed to acknowledge the topic. If not, we reject the acknowledgement. </para></sect2>
</sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
