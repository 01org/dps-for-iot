#!/bin/bash

# Include common functions
dir="${BASH_SOURCE%/*}"
if [[ ! -d "$dir" ]]; then dir="$PWD"; fi
. "$dir/common.sh"

PORT=50000

#
# Participants
# - Alice :: authorized to publish data on topic T
# - Bob :: authorized to subscribe to data on topic T
# - Eve :: eavesdropper who is not authorized to subscribe
# - Trudy :: intruder who is not authorized to publish or acknowledge
# - Trent :: trusted relay
#

#
# The tests are done for both the in-app permission store and in-memory permission store
#
for PERMSTORE in "-m" ""; do

#
# Unauthorized subscription
# - To protect against Eve, Alice must encrypt for Bob to prevent Eve from eavesdropping.
#

# Variant 1: Eve receives the publication but can't decrypt it.
reset_logs

test_node $PERMSTORE -u bob -s T
test_node $PERMSTORE -u eve -s T
sleep 1
test_node $PERMSTORE -u alice -p T -r bob
sleep 1

expect_pubs_received 1 T

# Variant 2: Eve doesn't receive the message because Trent doesn't forward unauthorized subscription.
if [ "$TRANSPORT" == "dtls" ]; then
    # DTLS must be enabled to auth subscriptions
    reset_logs

    test_node $PERMSTORE -u trent -l $PORT
    sleep 1
    test_node $PERMSTORE -u bob -s T -c $PORT
    test_node $PERMSTORE -u eve -s T -c $PORT
    sleep 2
    test_node $PERMSTORE -u alice -p T -r bob -c $PORT
    sleep 2

    expect_pubs_received 1 T
    expect_errors 1 "Unauthorized request"
fi

#
# Unauthorized publication
# - To protect against Trudy, Bob, and Trent must know that Alice is not the originator.
#

# Variant 1
reset_logs

test_node $PERMSTORE -u bob -s T
sleep 1
test_node $PERMSTORE -u trudy -p T -r bob
sleep 1

expect_pubs_received 0 T
expect_errors 1 "Unauthorized request"

# Variant 2
reset_logs
let PORT=PORT+1000

test_node $PERMSTORE -u trent -l $PORT
sleep 1
test_node $PERMSTORE -u bob -s T -c $PORT
sleep 2
test_node $PERMSTORE -u trudy -p T -r bob -c $PORT
sleep 2

expect_pubs_received 0 T
expect_errors 1 "Unauthorized request"

#
# Unauthorized access to data
# - Trent needs to validate data, but not see it.
#
reset_logs
let PORT=PORT+1000

test_node $PERMSTORE -u trent -s T -l $PORT
sleep 1
test_node $PERMSTORE -u bob -s T -c $PORT
sleep 2
test_node $PERMSTORE -u alice -p T -r bob -c $PORT
sleep 2

expect_pubs_received 1 T
assert_no_errors

#
# Unauthorized acknowledgement
# - To protect against Trudy, Alice, and Trent must know that Bob is not the originator.
#

# Variant 1
reset_logs

test_node $PERMSTORE -u bob -s T
test_node $PERMSTORE -u trudy -s T
sleep 1
test_node $PERMSTORE -u alice -p T -r bob -r trudy
sleep 2

expect_pubs_received 2 T
expect_errors 1 "Unauthorized request"

# Variant 2
reset_logs
let PORT=PORT+1000

test_node $PERMSTORE -u trent -l $PORT
sleep 1
test_node $PERMSTORE -u bob -s T -c $PORT
test_node $PERMSTORE -u trudy -s T -c $PORT
sleep 2
test_node $PERMSTORE -u alice -p T -r bob -r trudy -c $PORT
sleep 2

expect_pubs_received 2 T
expect_errors 1 "Unauthorized request"

#
# No test for subscription acknowledgement messages as they are not forwarded
#

done
